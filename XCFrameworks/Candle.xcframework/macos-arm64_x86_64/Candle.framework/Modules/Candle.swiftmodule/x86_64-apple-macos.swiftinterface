// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macos13.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -Onone -module-name Candle -package-name sdk_swift
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AppKit
import Combine
import CoreGraphics
import CryptoKit
import FinanceKit
import Foundation
import Foundation/*.Data*/
import Foundation/*.Date*/
import Foundation/*.URL*/
import HTTPTypes
import OpenAPIRuntime
import OpenAPIURLSession
import Swift
import SwiftSecurity
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 14, iOS 17.0, *)
@_Concurrency.MainActor public class CandleClient {
  @_Concurrency.MainActor public init(appUser: Candle.Models.AppUser)
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func deleteUser() async throws(Candle.Models.DeleteUser.Error)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func unlinkAccount(path: Candle.Operations.DeleteLinkedAccount.Input.Path) async throws(Candle.Models.UnlinkAccount.Error)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getLinkedAccounts() async throws(Candle.Models.GetLinkedAccounts.Error) -> [Candle.Models.LinkedAccount]
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getLinkedAccount(ref: Candle.Operations.GetLinkedAccount.Input.Path) async throws(Candle.Models.GetLinkedAccount.Error) -> Candle.Models.LinkedAccount
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getAssetAccounts(query: Candle.Models.GetAssetAccounts.Input.Query = .init()) async throws(Candle.Models.GetAssetAccounts.Error) -> [Candle.Models.AssetAccount]
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getAssetAccount(ref: Candle.Models.GetAssetAccount.Input.Path) async throws(Candle.Models.GetAssetAccount.Error) -> Candle.Models.AssetAccount
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getTrades(query: Candle.Models.GetTrades.Input.Query = .init()) async throws(Candle.Models.GetTrades.Error) -> [Candle.Models.Trade]
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getTrade(ref: Candle.Models.TradeRef) async throws(Candle.Models.GetTrade.Error) -> Candle.Models.Trade
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getTradeQuotes(request: Candle.Models.TradeQuoteRequest) async throws(Candle.Models.GetTradeQuotes.Error) -> [Candle.Models.TradeQuote]
  #endif
  @_Concurrency.MainActor public func getAvailableTools() -> [[Swift.String : Any]]
  @_Concurrency.MainActor public func executeTool(tool: any Candle.ToolCallRequest) async -> Swift.String
  @objc deinit
}
@available(macOS 14, iOS 17.0, *)
extension Candle.CandleClient : Observation.Observable {
}
public typealias Models = Candle.Components.Schemas
extension Candle.Components.Schemas {
  public typealias CreateUser = Candle.Operations.PostUsers
  public typealias UpdateUser = Candle.Operations.PutUsers
  public typealias DeleteUser = Candle.Operations.DeleteUsers
  public typealias LinkAccount = Candle.Operations.PostLinkedAccounts
  public typealias UnlinkAccount = Candle.Operations.DeleteLinkedAccount
  public typealias GetLinkedAccounts = Candle.Operations.GetLinkedAccounts
  public typealias GetLinkedAccount = Candle.Operations.GetLinkedAccount
  public typealias GetAssetAccounts = Candle.Operations.GetLinkedAccountsAssetAccounts
  public typealias GetAssetAccount = Candle.Operations.GetLinkedAccountAssetAccount
  public typealias GetTrades = Candle.Operations.GetLinkedAccountsTrades
  public typealias GetTrade = Candle.Operations.GetLinkedAccountsTrade
  public typealias ExecuteTrade = Candle.Operations.PostLinkedAccountsTrades
  public typealias GetTradeQuotes = Candle.Operations.PostLinkedAccountsTradesQuotes
  public enum SessionError : Swift.Error, Swift.Equatable, Swift.Codable {
    case openSessionError
    case keychainError
    case createUserError(Candle.Models.CreateUser.Error)
    case updateUserError(Candle.Models.UpdateUser.Error)
    public static func == (a: Candle.Components.Schemas.SessionError, b: Candle.Components.Schemas.SessionError) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Components.Schemas.AssetAccountDetails : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.AssetAccount : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.Trade : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.TradeQuote : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.TradeAsset : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.LinkedAccount : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Operations.PostUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case missingAuthorizationToken
    case keychainError
    case unauthorized(Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload)
    case tooManyRequests(Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostUsers.Error, b: Candle.Operations.PostUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PutUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case unauthorized(Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PutUsers.Error, b: Candle.Operations.PutUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.DeleteUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.DeleteUsers.Error, b: Candle.Operations.DeleteUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PostLinkedAccounts {
  public enum Result : Swift.Sendable, Swift.Equatable {
    case linked(Candle.Models.LinkedAccount)
    case challenge(Candle.Models.ChallengeRequest)
    public static func == (a: Candle.Operations.PostLinkedAccounts.Result, b: Candle.Operations.PostLinkedAccounts.Result) -> Swift.Bool
  }
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
    case forbidden(Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostLinkedAccounts.Error, b: Candle.Operations.PostLinkedAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.DeleteLinkedAccount {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.DeleteLinkedAccount.Error, b: Candle.Operations.DeleteLinkedAccount.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccount {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccount.Error, b: Candle.Operations.GetLinkedAccount.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccounts {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccounts.Error, b: Candle.Operations.GetLinkedAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountsAssetAccounts {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Error, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountAssetAccount {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Error, b: Candle.Operations.GetLinkedAccountAssetAccount.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountsTrades {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Error, b: Candle.Operations.GetLinkedAccountsTrades.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountsTrade {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Error, b: Candle.Operations.GetLinkedAccountsTrade.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PostLinkedAccountsTradesQuotes {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Error, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PostLinkedAccountsTrades {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Error, b: Candle.Operations.PostLinkedAccountsTrades.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Components.Schemas.ServiceCredentialsRequest {
  public init(credentials: Candle.Models.ServiceCredentials)
}
extension Candle.Components.Schemas.ChallengeResponseRequest {
  public init(response: Candle.Models.ChallengeResponse)
}
extension Candle.Components.Schemas.ChallengePasswordResponse {
  public init(password: Candle.Models.NonEmptyString, challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ChallengePasscodeResponse {
  public init(passcode: Candle.Models.ChallengeCode, challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ChallengeCodeResponse {
  public init(code: Candle.Models.ChallengeCode, challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ChallengeLinkResponse {
  public init(link: Candle.Models.ChallengeLink, challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ChallengeEmailResponse {
  public init(emailAddress: Candle.Models.EmailAddress, challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ChallengeTermsResponse {
  public init(challengeContext: Candle.Models.ChallengeContext)
}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails {
  public init(accountOpened: Swift.String, username: Swift.String, emailAddress: Swift.String, legalName: Swift.String)
}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails {
  public init()
}
extension Candle.Components.Schemas.LinkedAccount {
  public var ref: Candle.Models.GetLinkedAccount.Input.Path {
    get
  }
}
extension Candle.Components.Schemas.AssetAccount {
  public var ref: Candle.Models.GetAssetAccount.Input.Path {
    get
  }
}
extension Candle.Components.Schemas.TradeAsset {
  public var ref: Candle.Models.TradeAssetRef {
    get
  }
}
extension Candle.Components.Schemas.Trade {
  public var ref: Candle.Models.TradeRef {
    get
  }
}
extension Candle.Components.Schemas.Service : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public var logoURL: Foundation.URL {
    get
  }
  public var name: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
public protocol APIProtocol : Swift.Sendable {
  func postUsers(_ input: Candle.Operations.PostUsers.Input) async throws -> Candle.Operations.PostUsers.Output
  func putUsers(_ input: Candle.Operations.PutUsers.Input) async throws -> Candle.Operations.PutUsers.Output
  func deleteUsers(_ input: Candle.Operations.DeleteUsers.Input) async throws -> Candle.Operations.DeleteUsers.Output
  func getLinkedAccounts(_ input: Candle.Operations.GetLinkedAccounts.Input) async throws -> Candle.Operations.GetLinkedAccounts.Output
  func postLinkedAccounts(_ input: Candle.Operations.PostLinkedAccounts.Input) async throws -> Candle.Operations.PostLinkedAccounts.Output
  func getLinkedAccount(_ input: Candle.Operations.GetLinkedAccount.Input) async throws -> Candle.Operations.GetLinkedAccount.Output
  func deleteLinkedAccount(_ input: Candle.Operations.DeleteLinkedAccount.Input) async throws -> Candle.Operations.DeleteLinkedAccount.Output
  func getLinkedAccountsAssetAccounts(_ input: Candle.Operations.GetLinkedAccountsAssetAccounts.Input) async throws -> Candle.Operations.GetLinkedAccountsAssetAccounts.Output
  func getLinkedAccountAssetAccount(_ input: Candle.Operations.GetLinkedAccountAssetAccount.Input) async throws -> Candle.Operations.GetLinkedAccountAssetAccount.Output
  func getLinkedAccountsTrades(_ input: Candle.Operations.GetLinkedAccountsTrades.Input) async throws -> Candle.Operations.GetLinkedAccountsTrades.Output
  func postLinkedAccountsTrades(_ input: Candle.Operations.PostLinkedAccountsTrades.Input) async throws -> Candle.Operations.PostLinkedAccountsTrades.Output
  func getLinkedAccountsTrade(_ input: Candle.Operations.GetLinkedAccountsTrade.Input) async throws -> Candle.Operations.GetLinkedAccountsTrade.Output
  func postLinkedAccountsTradesQuotes(_ input: Candle.Operations.PostLinkedAccountsTradesQuotes.Input) async throws -> Candle.Operations.PostLinkedAccountsTradesQuotes.Output
}
extension Candle.APIProtocol {
  public func postUsers(headers: Candle.Operations.PostUsers.Input.Headers, body: Candle.Operations.PostUsers.Input.Body) async throws -> Candle.Operations.PostUsers.Output
  public func putUsers(headers: Candle.Operations.PutUsers.Input.Headers = .init(), body: Candle.Operations.PutUsers.Input.Body) async throws -> Candle.Operations.PutUsers.Output
  public func deleteUsers(headers: Candle.Operations.DeleteUsers.Input.Headers = .init(), body: Candle.Operations.DeleteUsers.Input.Body) async throws -> Candle.Operations.DeleteUsers.Output
  public func getLinkedAccounts(headers: Candle.Operations.GetLinkedAccounts.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccounts.Output
  public func postLinkedAccounts(headers: Candle.Operations.PostLinkedAccounts.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Input.Body) async throws -> Candle.Operations.PostLinkedAccounts.Output
  public func getLinkedAccount(path: Candle.Operations.GetLinkedAccount.Input.Path, headers: Candle.Operations.GetLinkedAccount.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccount.Output
  public func deleteLinkedAccount(path: Candle.Operations.DeleteLinkedAccount.Input.Path, headers: Candle.Operations.DeleteLinkedAccount.Input.Headers = .init()) async throws -> Candle.Operations.DeleteLinkedAccount.Output
  public func getLinkedAccountsAssetAccounts(query: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccountsAssetAccounts.Output
  public func getLinkedAccountAssetAccount(path: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path, headers: Candle.Operations.GetLinkedAccountAssetAccount.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccountAssetAccount.Output
  public func getLinkedAccountsTrades(query: Candle.Operations.GetLinkedAccountsTrades.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsTrades.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccountsTrades.Output
  public func postLinkedAccountsTrades(headers: Candle.Operations.PostLinkedAccountsTrades.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Input.Body) async throws -> Candle.Operations.PostLinkedAccountsTrades.Output
  public func getLinkedAccountsTrade(headers: Candle.Operations.GetLinkedAccountsTrade.Input.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Input.Body) async throws -> Candle.Operations.GetLinkedAccountsTrade.Output
  public func postLinkedAccountsTradesQuotes(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Body) async throws -> Candle.Operations.PostLinkedAccountsTradesQuotes.Output
}
public enum Servers {
}
public enum Components {
  public enum Schemas {
    public struct AppUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var appKey: Candle.Components.Schemas.AppID
      public var appSecret: Candle.Components.Schemas.AppAuthorizationToken
      public var appUserID: Candle.Components.Schemas.AppUserID?
      public init(appKey: Candle.Components.Schemas.AppID, appSecret: Candle.Components.Schemas.AppAuthorizationToken, appUserID: Candle.Components.Schemas.AppUserID? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case appKey
        case appSecret
        case appUserID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.AppUser, b: Candle.Components.Schemas.AppUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias AppID = Swift.String
    public typealias AppAuthorizationToken = Swift.String
    public typealias AppUserID = Swift.String
    public struct LinkedAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public var serviceUserID: Candle.Components.Schemas.ServiceUserID
      public var details: Candle.Components.Schemas.LinkedAccountDetails
      public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service, serviceUserID: Candle.Components.Schemas.ServiceUserID, details: Candle.Components.Schemas.LinkedAccountDetails)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case linkedAccountID
        case service
        case serviceUserID
        case details
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkedAccount, b: Candle.Components.Schemas.LinkedAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias LinkedAccountID = Swift.String
    @frozen public enum Service : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case apple
      case sandbox
      case cashApp
      case lyft
      case robinhood
      case uber
      case venmo
      case kalshi
      case discover
      case citibank
      case chime
      case paypal
      case americanExpress
      case coinbase
      case experian
      case wellsFargo
      case vanguard
      case charlesSchwab
      case jpmorganChase
      case capitalOne
      case bankOfAmerica
      case waymo
      case revel
      case turo
      case getaround
      case zipcar
      case airbnb
      case americanAirlines
      case delta
      case united
      case jetblue
      case southwest
      case hawaiian
      case hotels
      case geico
      case progressive
      case aaa
      case stateFarm
      case hertz
      case avis
      case tesla
      case doordash
      case uberEats
      case grubhub
      case resy
      case opentable
      case starbucks
      case blueBottle
      case costco
      case amazon
      case walmart
      case wholeFoods
      case mcdonalds
      case chipotle
      case sweetgreen
      case snapchat
      case x
      case facebook
      case instagram
      case signal
      case whatsapp
      case messenger
      case linkedin
      case discord
      case messages
      case telegram
      case reddit
      case pinterest
      case newYorkTimes
      case washingtonPost
      case wallStreetJournal
      case cnn
      case yahoo
      case fox
      case perplexity
      case openai
      case polymarket
      case espn
      case youtube
      case netflix
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.Service]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.Service] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias ServiceUserID = Swift.String
    @frozen public enum LinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case InactiveLinkedAccountDetails(Candle.Components.Schemas.InactiveLinkedAccountDetails)
      case ActiveLinkedAccountDetails(Candle.Components.Schemas.ActiveLinkedAccountDetails)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkedAccountDetails, b: Candle.Components.Schemas.LinkedAccountDetails) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InactiveLinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case inactive
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload
      public init(state: Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.InactiveLinkedAccountDetails, b: Candle.Components.Schemas.InactiveLinkedAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ActiveLinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case active
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload
      public var accountOpened: Swift.String?
      public var username: Swift.String?
      public var emailAddress: Swift.String?
      public var legalName: Swift.String
      public init(state: Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload, accountOpened: Swift.String? = nil, username: Swift.String? = nil, emailAddress: Swift.String? = nil, legalName: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case accountOpened
        case username
        case emailAddress
        case legalName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ActiveLinkedAccountDetails, b: Candle.Components.Schemas.ActiveLinkedAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum LinkRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case ServiceCredentialsRequest(Candle.Components.Schemas.ServiceCredentialsRequest)
      case ChallengeResponseRequest(Candle.Components.Schemas.ChallengeResponseRequest)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkRequest, b: Candle.Components.Schemas.LinkRequest) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ServiceCredentialsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StepPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case credentials
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var step: Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload
      public var credentials: Candle.Components.Schemas.ServiceCredentials
      public init(step: Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload, credentials: Candle.Components.Schemas.ServiceCredentials)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case step
        case credentials
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ServiceCredentialsRequest, b: Candle.Components.Schemas.ServiceCredentialsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case LocalServiceCredentials(Candle.Components.Schemas.LocalServiceCredentials)
      case RemoteServiceCredentials(Candle.Components.Schemas.RemoteServiceCredentials)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ServiceCredentials, b: Candle.Components.Schemas.ServiceCredentials) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct LocalServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var service: Candle.Components.Schemas.LocalService
      public init(service: Candle.Components.Schemas.LocalService)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LocalServiceCredentials, b: Candle.Components.Schemas.LocalServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum LocalService : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case apple
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.LocalService]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.LocalService] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct RemoteServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var service: Candle.Components.Schemas.RemoteService
      @frozen public enum UsernamePayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        case USPhoneNumber(Candle.Components.Schemas.USPhoneNumber)
        case EmailAddress(Candle.Components.Schemas.EmailAddress)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Components.Schemas.RemoteServiceCredentials.UsernamePayload, b: Candle.Components.Schemas.RemoteServiceCredentials.UsernamePayload) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var username: Candle.Components.Schemas.RemoteServiceCredentials.UsernamePayload
      public init(service: Candle.Components.Schemas.RemoteService, username: Candle.Components.Schemas.RemoteServiceCredentials.UsernamePayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        case username
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.RemoteServiceCredentials, b: Candle.Components.Schemas.RemoteServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum RemoteService : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case sandbox
      case cashApp
      case lyft
      case robinhood
      case uber
      case venmo
      case kalshi
      case discover
      case citibank
      case chime
      case paypal
      case americanExpress
      case coinbase
      case experian
      case wellsFargo
      case vanguard
      case charlesSchwab
      case jpmorganChase
      case capitalOne
      case bankOfAmerica
      case waymo
      case revel
      case turo
      case getaround
      case zipcar
      case airbnb
      case americanAirlines
      case delta
      case united
      case jetblue
      case southwest
      case hawaiian
      case hotels
      case geico
      case progressive
      case aaa
      case stateFarm
      case hertz
      case avis
      case tesla
      case doordash
      case uberEats
      case grubhub
      case resy
      case opentable
      case starbucks
      case blueBottle
      case costco
      case amazon
      case walmart
      case wholeFoods
      case mcdonalds
      case chipotle
      case sweetgreen
      case snapchat
      case x
      case facebook
      case instagram
      case signal
      case whatsapp
      case messenger
      case linkedin
      case discord
      case messages
      case telegram
      case reddit
      case pinterest
      case newYorkTimes
      case washingtonPost
      case wallStreetJournal
      case cnn
      case yahoo
      case fox
      case perplexity
      case openai
      case polymarket
      case espn
      case youtube
      case netflix
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.RemoteService]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.RemoteService] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias USPhoneNumber = Swift.String
    public typealias EmailAddress = Swift.String
    public struct ChallengeResponseRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StepPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case challenge
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeResponseRequest.StepPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeResponseRequest.StepPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var step: Candle.Components.Schemas.ChallengeResponseRequest.StepPayload
      public var response: Candle.Components.Schemas.ChallengeResponse
      public init(step: Candle.Components.Schemas.ChallengeResponseRequest.StepPayload, response: Candle.Components.Schemas.ChallengeResponse)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case step
        case response
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeResponseRequest, b: Candle.Components.Schemas.ChallengeResponseRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ChallengeResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case ChallengePasswordResponse(Candle.Components.Schemas.ChallengePasswordResponse)
      case ChallengePasscodeResponse(Candle.Components.Schemas.ChallengePasscodeResponse)
      case ChallengeCodeResponse(Candle.Components.Schemas.ChallengeCodeResponse)
      case ChallengeLinkResponse(Candle.Components.Schemas.ChallengeLinkResponse)
      case ChallengeEmailResponse(Candle.Components.Schemas.ChallengeEmailResponse)
      case ChallengeTermsResponse(Candle.Components.Schemas.ChallengeTermsResponse)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeResponse, b: Candle.Components.Schemas.ChallengeResponse) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengePasswordResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case password
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload
      public var password: Candle.Components.Schemas.NonEmptyString
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload, password: Candle.Components.Schemas.NonEmptyString, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case password
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengePasswordResponse, b: Candle.Components.Schemas.ChallengePasswordResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias NonEmptyString = Swift.String
    public typealias ChallengeContext = Swift.String
    public struct ChallengePasscodeResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case passcode
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload
      public var passcode: Candle.Components.Schemas.ChallengeCode
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload, passcode: Candle.Components.Schemas.ChallengeCode, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case passcode
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengePasscodeResponse, b: Candle.Components.Schemas.ChallengePasscodeResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ChallengeCode = Swift.String
    public struct ChallengeCodeResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case code
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload
      public var code: Candle.Components.Schemas.ChallengeCode
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload, code: Candle.Components.Schemas.ChallengeCode, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case code
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeCodeResponse, b: Candle.Components.Schemas.ChallengeCodeResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengeLinkResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload
      public var link: Candle.Components.Schemas.ChallengeLink
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload, link: Candle.Components.Schemas.ChallengeLink, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case link
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeLinkResponse, b: Candle.Components.Schemas.ChallengeLinkResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ChallengeLink = Swift.String
    public struct ChallengeEmailResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case email
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload
      public var emailAddress: Candle.Components.Schemas.EmailAddress
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload, emailAddress: Candle.Components.Schemas.EmailAddress, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case emailAddress
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeEmailResponse, b: Candle.Components.Schemas.ChallengeEmailResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengeTermsResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case terms
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeTermsResponse, b: Candle.Components.Schemas.ChallengeTermsResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ChallengeRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case ChallengePasswordRequest(Candle.Components.Schemas.ChallengePasswordRequest)
      case ChallengePasscodeRequest(Candle.Components.Schemas.ChallengePasscodeRequest)
      case ChallengeCodeRequest(Candle.Components.Schemas.ChallengeCodeRequest)
      case ChallengeLinkRequest(Candle.Components.Schemas.ChallengeLinkRequest)
      case ChallengeEmailRequest(Candle.Components.Schemas.ChallengeEmailRequest)
      case ChallengeTermsRequest(Candle.Components.Schemas.ChallengeTermsRequest)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeRequest, b: Candle.Components.Schemas.ChallengeRequest) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengePasswordRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case password
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengePasswordRequest, b: Candle.Components.Schemas.ChallengePasswordRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengePasscodeRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case passcode
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload
      public var passcodeLength: Candle.Components.Schemas.PositiveInt
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload, passcodeLength: Candle.Components.Schemas.PositiveInt, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case passcodeLength
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengePasscodeRequest, b: Candle.Components.Schemas.ChallengePasscodeRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias PositiveInt = Swift.Int
    public struct ChallengeCodeRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case code
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload
      public var codeDeliveryLocation: Candle.Components.Schemas.ChallengeCodeDeliveryLocation
      public var codeLength: Candle.Components.Schemas.PositiveInt
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload, codeDeliveryLocation: Candle.Components.Schemas.ChallengeCodeDeliveryLocation, codeLength: Candle.Components.Schemas.PositiveInt, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case codeDeliveryLocation
        case codeLength
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeCodeRequest, b: Candle.Components.Schemas.ChallengeCodeRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ChallengeCodeDeliveryLocation : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case sms
      case email
      case app
      case call
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.ChallengeCodeDeliveryLocation]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeCodeDeliveryLocation] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ChallengeLinkRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeLinkRequest, b: Candle.Components.Schemas.ChallengeLinkRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengeEmailRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case email
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeEmailRequest, b: Candle.Components.Schemas.ChallengeEmailRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ChallengeTermsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ChallengeTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case terms
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var challengeType: Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload
      public var termsURL: Candle.Components.Schemas.Url
      public var challengeContext: Candle.Components.Schemas.ChallengeContext
      public init(challengeType: Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload, termsURL: Candle.Components.Schemas.Url, challengeContext: Candle.Components.Schemas.ChallengeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case challengeType
        case termsURL
        case challengeContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ChallengeTermsRequest, b: Candle.Components.Schemas.ChallengeTermsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Url = Swift.String
    public struct AssetAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var legalAccountKind: Candle.Components.Schemas.LegalAccountKind
      public var nickname: Swift.String
      public var details: Candle.Components.Schemas.AssetAccountDetails
      public init(legalAccountKind: Candle.Components.Schemas.LegalAccountKind, nickname: Swift.String, details: Candle.Components.Schemas.AssetAccountDetails)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case legalAccountKind
        case nickname
        case details
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.AssetAccount, b: Candle.Components.Schemas.AssetAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum LegalAccountKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case individual
      case joint
      case traditionalIra
      case rothIra
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.LegalAccountKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.LegalAccountKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum AssetAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case FiatAccountDetails(Candle.Components.Schemas.FiatAccountDetails)
      case MarketAccountDetails(Candle.Components.Schemas.MarketAccountDetails)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.AssetAccountDetails, b: Candle.Components.Schemas.AssetAccountDetails) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct FiatAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case fiat
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID
      public var currencyCode: Swift.String
      public var balance: Swift.Double?
      public var ach: Candle.Components.Schemas.ACHDetails?
      public var wire: Candle.Components.Schemas.WireDetails?
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public init(assetKind: Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID, currencyCode: Swift.String, balance: Swift.Double? = nil, ach: Candle.Components.Schemas.ACHDetails? = nil, wire: Candle.Components.Schemas.WireDetails? = nil, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAccountID
        case currencyCode
        case balance
        case ach
        case wire
        case linkedAccountID
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.FiatAccountDetails, b: Candle.Components.Schemas.FiatAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ServiceAccountID = Swift.String
    public struct ACHDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var accountNumber: Swift.String
      public var routingNumber: Swift.String
      public var accountKind: Candle.Components.Schemas.ACHAccountKind
      public init(accountNumber: Swift.String, routingNumber: Swift.String, accountKind: Candle.Components.Schemas.ACHAccountKind)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case accountNumber
        case routingNumber
        case accountKind
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ACHDetails, b: Candle.Components.Schemas.ACHDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ACHAccountKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case checking
      case savings
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.ACHAccountKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.ACHAccountKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct WireDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var accountNumber: Swift.String
      public var routingNumber: Swift.String
      public init(accountNumber: Swift.String, routingNumber: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case accountNumber
        case routingNumber
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.WireDetails, b: Candle.Components.Schemas.WireDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MarketAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case stock
        case crypto
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public init(assetKind: Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAccountID
        case linkedAccountID
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MarketAccountDetails, b: Candle.Components.Schemas.MarketAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Trade : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var dateTime: Swift.String
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case success
        case inProgress
        case failure
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.Trade.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.Trade.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.Trade.StatePayload
      public var counterparty: Candle.Components.Schemas.Counterparty
      public var lost: Candle.Components.Schemas.TradeAsset
      public var gained: Candle.Components.Schemas.TradeAsset
      public init(dateTime: Swift.String, state: Candle.Components.Schemas.Trade.StatePayload, counterparty: Candle.Components.Schemas.Counterparty, lost: Candle.Components.Schemas.TradeAsset, gained: Candle.Components.Schemas.TradeAsset)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case dateTime
        case state
        case counterparty
        case lost
        case gained
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.Trade, b: Candle.Components.Schemas.Trade) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Counterparty : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case MerchantCounterparty(Candle.Components.Schemas.MerchantCounterparty)
      case UserCounterparty(Candle.Components.Schemas.UserCounterparty)
      case ServiceCounterparty(Candle.Components.Schemas.ServiceCounterparty)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.Counterparty, b: Candle.Components.Schemas.Counterparty) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MerchantCounterparty : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case merchant
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MerchantCounterparty.KindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MerchantCounterparty.KindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var kind: Candle.Components.Schemas.MerchantCounterparty.KindPayload
      public var name: Swift.String
      public var logoURL: Swift.String
      public var location: Candle.Components.Schemas.MerchantLocation?
      public init(kind: Candle.Components.Schemas.MerchantCounterparty.KindPayload, name: Swift.String, logoURL: Swift.String, location: Candle.Components.Schemas.MerchantLocation? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kind
        case name
        case logoURL
        case location
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MerchantCounterparty, b: Candle.Components.Schemas.MerchantCounterparty) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MerchantLocation : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var countryCode: Swift.String
      public var countrySubdivisionCode: Swift.String
      public var localityName: Swift.String
      public init(countryCode: Swift.String, countrySubdivisionCode: Swift.String, localityName: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case countryCode
        case countrySubdivisionCode
        case localityName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MerchantLocation, b: Candle.Components.Schemas.MerchantLocation) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct UserCounterparty : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case user
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.UserCounterparty.KindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.UserCounterparty.KindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var kind: Candle.Components.Schemas.UserCounterparty.KindPayload
      public var legalName: Swift.String
      public var avatarURL: Swift.String
      public var username: Swift.String
      public init(kind: Candle.Components.Schemas.UserCounterparty.KindPayload, legalName: Swift.String, avatarURL: Swift.String, username: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kind
        case legalName
        case avatarURL
        case username
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.UserCounterparty, b: Candle.Components.Schemas.UserCounterparty) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ServiceCounterparty : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case service
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ServiceCounterparty.KindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ServiceCounterparty.KindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var kind: Candle.Components.Schemas.ServiceCounterparty.KindPayload
      public var service: Candle.Components.Schemas.Service
      public init(kind: Candle.Components.Schemas.ServiceCounterparty.KindPayload, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kind
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ServiceCounterparty, b: Candle.Components.Schemas.ServiceCounterparty) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum TradeAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case FiatAsset(Candle.Components.Schemas.FiatAsset)
      case MarketTradeAsset(Candle.Components.Schemas.MarketTradeAsset)
      case TransportAsset(Candle.Components.Schemas.TransportAsset)
      case OtherAsset(Candle.Components.Schemas.OtherAsset)
      case NothingAsset(Candle.Components.Schemas.NothingAsset)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeAsset, b: Candle.Components.Schemas.TradeAsset) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct FiatAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case fiat
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.FiatAsset.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.FiatAsset.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.FiatAsset.AssetKindPayload
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID?
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID
      public var currencyCode: Swift.String
      public var amount: Swift.Double
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public init(assetKind: Candle.Components.Schemas.FiatAsset.AssetKindPayload, serviceTradeID: Candle.Components.Schemas.ServiceTradeID? = nil, serviceAccountID: Candle.Components.Schemas.ServiceAccountID, currencyCode: Swift.String, amount: Swift.Double, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceTradeID
        case serviceAccountID
        case currencyCode
        case amount
        case linkedAccountID
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.FiatAsset, b: Candle.Components.Schemas.FiatAsset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ServiceTradeID = Swift.String
    public struct MarketTradeAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case crypto
        case stock
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID
      public var serviceAssetID: Candle.Components.Schemas.ServiceAssetID
      public var symbol: Swift.String
      public var amount: Swift.Double
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public var name: Swift.String
      public var color: Swift.String
      public var logoURL: Swift.String
      public init(assetKind: Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID, serviceAssetID: Candle.Components.Schemas.ServiceAssetID, symbol: Swift.String, amount: Swift.Double, serviceTradeID: Candle.Components.Schemas.ServiceTradeID, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service, name: Swift.String, color: Swift.String, logoURL: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAccountID
        case serviceAssetID
        case symbol
        case amount
        case serviceTradeID
        case linkedAccountID
        case service
        case name
        case color
        case logoURL
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MarketTradeAsset, b: Candle.Components.Schemas.MarketTradeAsset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ServiceAssetID = Swift.String
    public struct TransportAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case transport
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.TransportAsset.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.TransportAsset.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.TransportAsset.AssetKindPayload
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID
      public var serviceAssetID: Candle.Components.Schemas.ServiceAssetID
      public var name: Swift.String
      public var description: Swift.String
      public var imageURL: Candle.Components.Schemas.Url
      public var originCoordinates: Candle.Components.Schemas.Coordinates
      public var originAddress: Candle.Components.Schemas.Address
      public var destinationCoordinates: Candle.Components.Schemas.Coordinates
      public var destinationAddress: Candle.Components.Schemas.Address
      public var seats: Swift.Double
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.Service
      public init(assetKind: Candle.Components.Schemas.TransportAsset.AssetKindPayload, serviceTradeID: Candle.Components.Schemas.ServiceTradeID, serviceAssetID: Candle.Components.Schemas.ServiceAssetID, name: Swift.String, description: Swift.String, imageURL: Candle.Components.Schemas.Url, originCoordinates: Candle.Components.Schemas.Coordinates, originAddress: Candle.Components.Schemas.Address, destinationCoordinates: Candle.Components.Schemas.Coordinates, destinationAddress: Candle.Components.Schemas.Address, seats: Swift.Double, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceTradeID
        case serviceAssetID
        case name
        case description
        case imageURL
        case originCoordinates
        case originAddress
        case destinationCoordinates
        case destinationAddress
        case seats
        case linkedAccountID
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransportAsset, b: Candle.Components.Schemas.TransportAsset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Coordinates : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var latitude: Candle.Components.Schemas.Latitude
      public var longitude: Candle.Components.Schemas.Longitude
      public init(latitude: Candle.Components.Schemas.Latitude, longitude: Candle.Components.Schemas.Longitude)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case latitude
        case longitude
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.Coordinates, b: Candle.Components.Schemas.Coordinates) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Latitude = Swift.Double
    public typealias Longitude = Swift.Double
    public struct Address : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var value: Swift.String
      public init(value: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.Address, b: Candle.Components.Schemas.Address) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct OtherAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case other
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.OtherAsset.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.OtherAsset.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.OtherAsset.AssetKindPayload
      public init(assetKind: Candle.Components.Schemas.OtherAsset.AssetKindPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OtherAsset, b: Candle.Components.Schemas.OtherAsset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct NothingAsset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case nothing
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.NothingAsset.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.NothingAsset.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.NothingAsset.AssetKindPayload
      public init(assetKind: Candle.Components.Schemas.NothingAsset.AssetKindPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.NothingAsset, b: Candle.Components.Schemas.NothingAsset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TradeQuoteContext : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var context: Swift.String
      public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID, context: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case linkedAccountID
        case context
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeQuoteContext, b: Candle.Components.Schemas.TradeQuoteContext) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TradeRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var lost: Candle.Components.Schemas.TradeAssetRef
      public var gained: Candle.Components.Schemas.TradeAssetRef
      public init(lost: Candle.Components.Schemas.TradeAssetRef, gained: Candle.Components.Schemas.TradeAssetRef)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case lost
        case gained
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeRef, b: Candle.Components.Schemas.TradeRef) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum TradeAssetRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case FiatAssetRef(Candle.Components.Schemas.FiatAssetRef)
      case MarketAssetRef(Candle.Components.Schemas.MarketAssetRef)
      case TransportAssetRef(Candle.Components.Schemas.TransportAssetRef)
      case OtherAsset(Candle.Components.Schemas.OtherAsset)
      case NothingAsset(Candle.Components.Schemas.NothingAsset)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeAssetRef, b: Candle.Components.Schemas.TradeAssetRef) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct FiatAssetRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case fiat
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.FiatAssetRef.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.FiatAssetRef.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.FiatAssetRef.AssetKindPayload
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID?
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public init(assetKind: Candle.Components.Schemas.FiatAssetRef.AssetKindPayload, serviceTradeID: Candle.Components.Schemas.ServiceTradeID? = nil, linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceTradeID
        case linkedAccountID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.FiatAssetRef, b: Candle.Components.Schemas.FiatAssetRef) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MarketAssetRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case crypto
        case stock
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MarketAssetRef.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MarketAssetRef.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.MarketAssetRef.AssetKindPayload
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public init(assetKind: Candle.Components.Schemas.MarketAssetRef.AssetKindPayload, serviceTradeID: Candle.Components.Schemas.ServiceTradeID, linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceTradeID
        case linkedAccountID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MarketAssetRef, b: Candle.Components.Schemas.MarketAssetRef) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TransportAssetRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case transport
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.TransportAssetRef.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.TransportAssetRef.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.TransportAssetRef.AssetKindPayload
      public var serviceTradeID: Candle.Components.Schemas.ServiceTradeID
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public init(assetKind: Candle.Components.Schemas.TransportAssetRef.AssetKindPayload, serviceTradeID: Candle.Components.Schemas.ServiceTradeID, linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceTradeID
        case linkedAccountID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransportAssetRef, b: Candle.Components.Schemas.TransportAssetRef) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TradeQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var linkedAccountIDs: Swift.String?
      public var gained: Candle.Components.Schemas.TradeAssetQuoteRequest
      public init(linkedAccountIDs: Swift.String? = nil, gained: Candle.Components.Schemas.TradeAssetQuoteRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case linkedAccountIDs
        case gained
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeQuoteRequest, b: Candle.Components.Schemas.TradeQuoteRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum TradeAssetQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case FiatAssetQuoteRequest(Candle.Components.Schemas.FiatAssetQuoteRequest)
      case MarketAssetQuoteRequest(Candle.Components.Schemas.MarketAssetQuoteRequest)
      case TransportAssetQuoteRequest(Candle.Components.Schemas.TransportAssetQuoteRequest)
      case NothingAssetQuoteRequest(Candle.Components.Schemas.NothingAssetQuoteRequest)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeAssetQuoteRequest, b: Candle.Components.Schemas.TradeAssetQuoteRequest) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct FiatAssetQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case fiat
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID?
      public var currencyCode: Swift.String?
      public var amount: Swift.Double?
      public init(assetKind: Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID? = nil, currencyCode: Swift.String? = nil, amount: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAccountID
        case currencyCode
        case amount
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.FiatAssetQuoteRequest, b: Candle.Components.Schemas.FiatAssetQuoteRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MarketAssetQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case crypto
        case stock
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload
      public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID?
      public var serviceAssetID: Candle.Components.Schemas.ServiceAssetID?
      public var symbol: Swift.String?
      public var amount: Swift.Double?
      public init(assetKind: Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID? = nil, serviceAssetID: Candle.Components.Schemas.ServiceAssetID? = nil, symbol: Swift.String? = nil, amount: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAccountID
        case serviceAssetID
        case symbol
        case amount
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MarketAssetQuoteRequest, b: Candle.Components.Schemas.MarketAssetQuoteRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TransportAssetQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case transport
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload
      public var serviceAssetID: Candle.Components.Schemas.ServiceAssetID?
      public var originCoordinates: Candle.Components.Schemas.Coordinates?
      public var originAddress: Candle.Components.Schemas.Address?
      public var destinationCoordinates: Candle.Components.Schemas.Coordinates?
      public var destinationAddress: Candle.Components.Schemas.Address?
      public var seats: Swift.Double?
      public init(assetKind: Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload, serviceAssetID: Candle.Components.Schemas.ServiceAssetID? = nil, originCoordinates: Candle.Components.Schemas.Coordinates? = nil, originAddress: Candle.Components.Schemas.Address? = nil, destinationCoordinates: Candle.Components.Schemas.Coordinates? = nil, destinationAddress: Candle.Components.Schemas.Address? = nil, seats: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        case serviceAssetID
        case originCoordinates
        case originAddress
        case destinationCoordinates
        case destinationAddress
        case seats
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransportAssetQuoteRequest, b: Candle.Components.Schemas.TransportAssetQuoteRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct NothingAssetQuoteRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case nothing
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var assetKind: Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload
      public init(assetKind: Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case assetKind
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.NothingAssetQuoteRequest, b: Candle.Components.Schemas.NothingAssetQuoteRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TradeQuote : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var lost: Candle.Components.Schemas.TradeAsset
      public var gained: Candle.Components.Schemas.TradeAsset
      public var context: Swift.String
      public init(lost: Candle.Components.Schemas.TradeAsset, gained: Candle.Components.Schemas.TradeAsset, context: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case lost
        case gained
        case context
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TradeQuote, b: Candle.Components.Schemas.TradeQuote) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum Parameters {
  }
  public enum RequestBodies {
  }
  public enum Responses {
  }
  public enum Headers {
  }
}
public enum Operations {
  public enum PostUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var anonymousUserId: Swift.String
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostUsers.AcceptableContentType>]
        public init(anonymousUserId: Swift.String, accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Input.Headers, b: Candle.Operations.PostUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Input.Body, b: Candle.Operations.PostUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostUsers.Input.Body
      public init(headers: Candle.Operations.PostUsers.Input.Headers, body: Candle.Operations.PostUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostUsers.Input, b: Candle.Operations.PostUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var authorization: Swift.String
          public init(authorization: Swift.String)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Created.Headers, b: Candle.Operations.PostUsers.Output.Created.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Created.Headers
        public init(headers: Candle.Operations.PostUsers.Output.Created.Headers)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Created, b: Candle.Operations.PostUsers.Output.Created) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(Candle.Operations.PostUsers.Output.Created)
      public var created: Candle.Operations.PostUsers.Output.Created {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Headers, b: Candle.Operations.PostUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Body, b: Candle.Operations.PostUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized, b: Candle.Operations.PostUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Headers, b: Candle.Operations.PostUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Body, b: Candle.Operations.PostUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.PostUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.PostUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Forbidden, b: Candle.Operations.PostUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.PostUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.PostUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Headers, b: Candle.Operations.PostUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Body, b: Candle.Operations.PostUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.PostUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.PostUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.NotFound, b: Candle.Operations.PostUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostUsers.Output.NotFound)
      public var notFound: Candle.Operations.PostUsers.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Body, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent, b: Candle.Operations.PostUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostUsers.Output.UnprocessableContent {
        get throws
      }
      public struct TooManyRequests : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Headers, b: Candle.Operations.PostUsers.Output.TooManyRequests.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.TooManyRequests.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case overUserLimit_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Body, b: Candle.Operations.PostUsers.Output.TooManyRequests.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.TooManyRequests.Body
        public init(headers: Candle.Operations.PostUsers.Output.TooManyRequests.Headers = .init(), body: Candle.Operations.PostUsers.Output.TooManyRequests.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests, b: Candle.Operations.PostUsers.Output.TooManyRequests) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case tooManyRequests(Candle.Operations.PostUsers.Output.TooManyRequests)
      public var tooManyRequests: Candle.Operations.PostUsers.Output.TooManyRequests {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Headers, b: Candle.Operations.PostUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Body, b: Candle.Operations.PostUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError, b: Candle.Operations.PostUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostUsers.Output, b: Candle.Operations.PostUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PutUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PutUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PutUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Input.Headers, b: Candle.Operations.PutUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PutUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Input.Body, b: Candle.Operations.PutUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PutUsers.Input.Body
      public init(headers: Candle.Operations.PutUsers.Input.Headers = .init(), body: Candle.Operations.PutUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PutUsers.Input, b: Candle.Operations.PutUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.NoContent, b: Candle.Operations.PutUsers.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.PutUsers.Output.NoContent)
      public static var noContent: Candle.Operations.PutUsers.Output {
        get
      }
      public var noContent: Candle.Operations.PutUsers.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Headers, b: Candle.Operations.PutUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Body, b: Candle.Operations.PutUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PutUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PutUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized, b: Candle.Operations.PutUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PutUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PutUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Headers, b: Candle.Operations.PutUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Body, b: Candle.Operations.PutUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.PutUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.PutUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Forbidden, b: Candle.Operations.PutUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.PutUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.PutUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Headers, b: Candle.Operations.PutUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Body, b: Candle.Operations.PutUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.PutUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.PutUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.NotFound, b: Candle.Operations.PutUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PutUsers.Output.NotFound)
      public var notFound: Candle.Operations.PutUsers.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Headers, b: Candle.Operations.PutUsers.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case different_app
              case different_appUser
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Body, b: Candle.Operations.PutUsers.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Conflict.Body
        public init(headers: Candle.Operations.PutUsers.Output.Conflict.Headers = .init(), body: Candle.Operations.PutUsers.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Conflict, b: Candle.Operations.PutUsers.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.PutUsers.Output.Conflict)
      public var conflict: Candle.Operations.PutUsers.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Body, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PutUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent, b: Candle.Operations.PutUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PutUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PutUsers.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Headers, b: Candle.Operations.PutUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Body, b: Candle.Operations.PutUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PutUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PutUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError, b: Candle.Operations.PutUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PutUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PutUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PutUsers.Output, b: Candle.Operations.PutUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PutUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PutUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Input.Headers, b: Candle.Operations.DeleteUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.DeleteUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Input.Body, b: Candle.Operations.DeleteUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.DeleteUsers.Input.Body
      public init(headers: Candle.Operations.DeleteUsers.Input.Headers = .init(), body: Candle.Operations.DeleteUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteUsers.Input, b: Candle.Operations.DeleteUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.NoContent, b: Candle.Operations.DeleteUsers.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.DeleteUsers.Output.NoContent)
      public static var noContent: Candle.Operations.DeleteUsers.Output {
        get
      }
      public var noContent: Candle.Operations.DeleteUsers.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Body, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized, b: Candle.Operations.DeleteUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.DeleteUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.DeleteUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Headers, b: Candle.Operations.DeleteUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Body, b: Candle.Operations.DeleteUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden, b: Candle.Operations.DeleteUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.DeleteUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.DeleteUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Headers, b: Candle.Operations.DeleteUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Body, b: Candle.Operations.DeleteUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound, b: Candle.Operations.DeleteUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.DeleteUsers.Output.NotFound)
      public var notFound: Candle.Operations.DeleteUsers.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.DeleteUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.DeleteUsers.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Body, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError, b: Candle.Operations.DeleteUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.DeleteUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.DeleteUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteUsers.Output, b: Candle.Operations.DeleteUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.DeleteUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.DeleteUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Input.Headers, b: Candle.Operations.GetLinkedAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccounts.Input.Headers
      public init(headers: Candle.Operations.GetLinkedAccounts.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccounts.Input, b: Candle.Operations.GetLinkedAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.LinkedAccount])
          public var json: [Candle.Components.Schemas.LinkedAccount] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok.Body, b: Candle.Operations.GetLinkedAccounts.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok, b: Candle.Operations.GetLinkedAccounts.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccounts.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccounts.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccounts.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound, b: Candle.Operations.GetLinkedAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccounts.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccounts.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccounts.Output, b: Candle.Operations.GetLinkedAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PostLinkedAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Input.Headers, b: Candle.Operations.PostLinkedAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostLinkedAccounts.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.LinkRequest)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Input.Body, b: Candle.Operations.PostLinkedAccounts.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostLinkedAccounts.Input.Body
      public init(headers: Candle.Operations.PostLinkedAccounts.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccounts.Input, b: Candle.Operations.PostLinkedAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Created.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Created.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.LinkedAccount)
          public var json: Candle.Components.Schemas.LinkedAccount {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created.Body, b: Candle.Operations.PostLinkedAccounts.Output.Created.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Created.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Created.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Created.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created, b: Candle.Operations.PostLinkedAccounts.Output.Created) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(Candle.Operations.PostLinkedAccounts.Output.Created)
      public var created: Candle.Operations.PostLinkedAccounts.Output.Created {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_accountLocked
              case badAuthorization_challengeExpired
              case badAuthorization_challengeResponseIncorrect
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostLinkedAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostLinkedAccounts.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabled_serviceNotSupportedYet
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body, b: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Forbidden, b: Candle.Operations.PostLinkedAccounts.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.PostLinkedAccounts.Output.Forbidden)
      public var forbidden: Candle.Operations.PostLinkedAccounts.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound, b: Candle.Operations.PostLinkedAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostLinkedAccounts.Output.NotFound)
      public var notFound: Candle.Operations.PostLinkedAccounts.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case alreadyLinked_account
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict, b: Candle.Operations.PostLinkedAccounts.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.PostLinkedAccounts.Output.Conflict)
      public var conflict: Candle.Operations.PostLinkedAccounts.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct PreconditionRequired : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.ChallengeRequest)
          public var json: Candle.Components.Schemas.ChallengeRequest {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case preconditionRequired(Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired)
      public var preconditionRequired: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostLinkedAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostLinkedAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccounts.Output, b: Candle.Operations.PostLinkedAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostLinkedAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostLinkedAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
        public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Input.Path, b: Candle.Operations.GetLinkedAccount.Input.Path) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: Candle.Operations.GetLinkedAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccount.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Input.Headers, b: Candle.Operations.GetLinkedAccount.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccount.Input.Headers
      public init(path: Candle.Operations.GetLinkedAccount.Input.Path, headers: Candle.Operations.GetLinkedAccount.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccount.Input, b: Candle.Operations.GetLinkedAccount.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccount.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccount.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.LinkedAccount)
          public var json: Candle.Components.Schemas.LinkedAccount {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.Ok.Body, b: Candle.Operations.GetLinkedAccount.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccount.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccount.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccount.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Output.Ok, b: Candle.Operations.GetLinkedAccount.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccount.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccount.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Output.Unauthorized, b: Candle.Operations.GetLinkedAccount.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccount.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccount.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_linkedAccount
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccount.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccount.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccount.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccount.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Output.NotFound, b: Candle.Operations.GetLinkedAccount.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccount.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccount.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccount.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccount.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccount.Output.InternalServerError, b: Candle.Operations.GetLinkedAccount.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccount.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccount.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccount.Output, b: Candle.Operations.GetLinkedAccount.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteLinkedAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
        public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Input.Path, b: Candle.Operations.DeleteLinkedAccount.Input.Path) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: Candle.Operations.DeleteLinkedAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteLinkedAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteLinkedAccount.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Input.Headers, b: Candle.Operations.DeleteLinkedAccount.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.DeleteLinkedAccount.Input.Headers
      public init(path: Candle.Operations.DeleteLinkedAccount.Input.Path, headers: Candle.Operations.DeleteLinkedAccount.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteLinkedAccount.Input, b: Candle.Operations.DeleteLinkedAccount.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers = .init())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NoContent, b: Candle.Operations.DeleteLinkedAccount.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.DeleteLinkedAccount.Output.NoContent)
      public var noContent: Candle.Operations.DeleteLinkedAccount.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized)
      public var unauthorized: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_linkedAccount
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.DeleteLinkedAccount.Output.NotFound)
      public var notFound: Candle.Operations.DeleteLinkedAccount.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case alreadyUnlinked_account
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.DeleteLinkedAccount.Output.Conflict)
      public var conflict: Candle.Operations.DeleteLinkedAccount.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError)
      public var internalServerError: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteLinkedAccount.Output, b: Candle.Operations.DeleteLinkedAccount.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.DeleteLinkedAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountsAssetAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var linkedAccountIDs: Swift.String?
        @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case fiat
          case stock
          case crypto
          public init?(rawValue: Swift.String)
          public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var assetKind: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload?
        public init(linkedAccountIDs: Swift.String? = nil, assetKind: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload? = nil)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsAssetAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsAssetAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Headers
      public init(query: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Input, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.AssetAccount])
          public var json: [Candle.Components.Schemas.AssetAccount] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsAssetAccounts.Output, b: Candle.Operations.GetLinkedAccountsAssetAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountsAssetAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountsAssetAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountAssetAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
        @frozen public enum AssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case fiat
          case crypto
          case stock
          public init?(rawValue: Swift.String)
          public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var assetKind: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload
        public var serviceAccountID: Candle.Components.Schemas.ServiceAccountID
        public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID, assetKind: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload, serviceAccountID: Candle.Components.Schemas.ServiceAccountID)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path, b: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountAssetAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountAssetAccount.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Input.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Input.Headers
      public init(path: Candle.Operations.GetLinkedAccountAssetAccount.Input.Path, headers: Candle.Operations.GetLinkedAccountAssetAccount.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Input, b: Candle.Operations.GetLinkedAccountAssetAccount.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.AssetAccount)
          public var json: Candle.Components.Schemas.AssetAccount {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_assetAccount
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountAssetAccount.Output, b: Candle.Operations.GetLinkedAccountAssetAccount.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountAssetAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountAssetAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountsTrades {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var linkedAccountIDs: Swift.String?
        public var dateTimeSpan: Swift.String?
        @frozen public enum GainedAssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case fiat
          case stock
          case crypto
          case transport
          case other
          case nothing
          public init?(rawValue: Swift.String)
          public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var gainedAssetKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload?
        @frozen public enum LostAssetKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case fiat
          case stock
          case crypto
          case transport
          case other
          case nothing
          public init?(rawValue: Swift.String)
          public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var lostAssetKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload?
        @frozen public enum CounterpartyKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case merchant
          case user
          case service
          public init?(rawValue: Swift.String)
          public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var counterpartyKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload?
        public init(linkedAccountIDs: Swift.String? = nil, dateTimeSpan: Swift.String? = nil, gainedAssetKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload? = nil, lostAssetKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload? = nil, counterpartyKind: Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload? = nil)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Input.Query, b: Candle.Operations.GetLinkedAccountsTrades.Input.Query) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: Candle.Operations.GetLinkedAccountsTrades.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsTrades.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsTrades.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Input.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountsTrades.Input.Headers
      public init(query: Candle.Operations.GetLinkedAccountsTrades.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsTrades.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Input, b: Candle.Operations.GetLinkedAccountsTrades.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.Trade])
          public var json: [Candle.Components.Schemas.Trade] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Ok, b: Candle.Operations.GetLinkedAccountsTrades.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountsTrades.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountsTrades.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound, b: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountsTrades.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountsTrades.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsTrades.Output, b: Candle.Operations.GetLinkedAccountsTrades.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountsTrades.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrades.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PostLinkedAccountsTrades {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccountsTrades.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccountsTrades.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Input.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostLinkedAccountsTrades.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.TradeQuoteContext)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Input.Body, b: Candle.Operations.PostLinkedAccountsTrades.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostLinkedAccountsTrades.Input.Body
      public init(headers: Candle.Operations.PostLinkedAccountsTrades.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Input, b: Candle.Operations.PostLinkedAccountsTrades.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.Trade)
          public var json: Candle.Components.Schemas.Trade {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Body, b: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Ok, b: Candle.Operations.PostLinkedAccountsTrades.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.PostLinkedAccountsTrades.Output.Ok)
      public var ok: Candle.Operations.PostLinkedAccountsTrades.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body, b: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized, b: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body, b: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound, b: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostLinkedAccountsTrades.Output.NotFound)
      public var notFound: Candle.Operations.PostLinkedAccountsTrades.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body, b: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent, b: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers, b: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body, b: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError, b: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccountsTrades.Output, b: Candle.Operations.PostLinkedAccountsTrades.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostLinkedAccountsTrades.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostLinkedAccountsTrades.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountsTrade {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsTrade.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsTrade.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Input.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountsTrade.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.TradeRef)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Input.Body, b: Candle.Operations.GetLinkedAccountsTrade.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.GetLinkedAccountsTrade.Input.Body
      public init(headers: Candle.Operations.GetLinkedAccountsTrade.Input.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Input, b: Candle.Operations.GetLinkedAccountsTrade.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.Trade)
          public var json: Candle.Components.Schemas.Trade {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Ok, b: Candle.Operations.GetLinkedAccountsTrade.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountsTrade.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountsTrade.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_trade
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound, b: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountsTrade.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountsTrade.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsTrade.Output, b: Candle.Operations.GetLinkedAccountsTrade.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountsTrade.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountsTrade.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PostLinkedAccountsTradesQuotes {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccountsTradesQuotes.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccountsTradesQuotes.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.TradeQuoteRequest)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Body
      public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Input, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.TradeQuote])
          public var json: [Candle.Components.Schemas.TradeQuote] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok)
      public var ok: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound)
      public var notFound: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccountsTradesQuotes.Output, b: Candle.Operations.PostLinkedAccountsTradesQuotes.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostLinkedAccountsTradesQuotes.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostLinkedAccountsTradesQuotes.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Result {
  public var isSuccess: Swift.Bool {
    get
  }
  public func tap(_ sideEffect: (Success) -> Swift.Void) -> Swift.Result<Success, Failure>
}
#else
extension Swift.Result {
  public var isSuccess: Swift.Bool {
    get
  }
  public func tap(_ sideEffect: (Success) -> Swift.Void) -> Swift.Result<Success, Failure>
}
#endif
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  #if compiler(>=5.3) && $TypedThrows
  public func tapNone<E>(_ sideEffect: () throws(E) -> Swift.Void) throws(E) -> Wrapped? where E : Swift.Error
  #endif
}
#else
extension Swift.Optional {
  #if compiler(>=5.3) && $TypedThrows
  public func tapNone<E>(_ sideEffect: () throws(E) -> Swift.Void) throws(E) -> Wrapped? where E : Swift.Error
  #endif
}
#endif
public enum ConnectionResult : Swift.Error {
  case closed
  case lost
  public static func == (a: Candle.ConnectionResult, b: Candle.ConnectionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public actor Session : Swift.Sendable {
  public static func open(authorizationToken: Swift.String, onClose: @escaping @_Concurrency.MainActor @Sendable (Candle.ConnectionResult) -> Swift.Void) async -> Candle.Session?
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public protocol ToolCallRequest : Swift.Decodable, Swift.Encodable {
  var name: Swift.String { get }
  var arguments: Swift.String { get }
}
@available(iOS 17.0, macOS 14.0, *)
@_Concurrency.MainActor @preconcurrency public struct ActionSheet : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(showSheet: SwiftUICore.Binding<Swift.Bool>, tradeQuote: Candle.Models.TradeQuote, presentationBackground: SwiftUICore.AnyShapeStyle, completion: @escaping (Swift.Result<Candle.Models.Trade, Candle.Models.ExecuteTrade.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 17.0, macOS 14.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s6Candle11ActionSheetV4bodyQrvp", 0) __
}
@available(macOS 14, iOS 17.0, *)
public enum PresentationStyle {
  case fullScreen
  case sheet
  public static func == (a: Candle.PresentationStyle, b: Candle.PresentationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, macOS 14.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func candleTradeExecutionSheet(item: SwiftUICore.Binding<Candle.Models.TradeQuote?>, presentationBackground: SwiftUICore.AnyShapeStyle = .init(.regularMaterial), completion: @escaping (Swift.Result<Candle.Models.Trade, Candle.Models.ExecuteTrade.Error>) -> Swift.Void = { _ in }) -> some SwiftUICore.View
  
}
public typealias CandleLinkedAccountAction = (_ linkedAccount: Candle.Models.LinkedAccount) -> Swift.Void
extension Swift.Array where Element == Candle.Components.Schemas.Service {
  public static var supported: [Candle.Models.Service] {
    get
  }
}
@available(macOS 14, iOS 17.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func candleLinkSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, customerName: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 24, services: [Candle.Models.Service] = .supported, showDynamicLoading: Swift.Bool = true, presentationStyle: Candle.PresentationStyle = .sheet, presentationBackground: SwiftUICore.AnyShapeStyle? = nil, action: @escaping Candle.CandleLinkedAccountAction) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func candleLinkSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, service: Candle.Models.Service?, customerName: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 24, showDynamicLoading: Swift.Bool = true, presentationStyle: Candle.PresentationStyle = .sheet, presentationBackground: SwiftUICore.AnyShapeStyle? = nil, action: @escaping Candle.CandleLinkedAccountAction) -> some SwiftUICore.View
  
}
@available(macOS 14, iOS 17.0, *)
extension Candle.CandleClient : Swift.Sendable {}
extension Candle.Components.Schemas.Service : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Service : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LocalServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.LocalServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.LocalServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LocalService : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LocalService : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.RemoteServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.RemoteServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.RemoteServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.RemoteService : Swift.RawRepresentable {}
extension Candle.Components.Schemas.RemoteService : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeResponseRequest.StepPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeResponseRequest.StepPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeResponseRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeResponseRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeResponseRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasswordResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengePasswordResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengePasswordResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengePasswordResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasscodeResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengePasscodeResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengePasscodeResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengePasscodeResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeCodeResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeCodeResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeCodeResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeLinkResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeLinkResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeLinkResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeLinkResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeEmailResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeEmailResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeEmailResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeEmailResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeTermsResponse.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeTermsResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeTermsResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeTermsResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasswordRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengePasswordRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengePasswordRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengePasswordRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengePasscodeRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengePasscodeRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengePasscodeRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengePasscodeRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeCodeRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeCodeRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeCodeRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeDeliveryLocation : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeCodeDeliveryLocation : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeLinkRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeLinkRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeLinkRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeLinkRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeEmailRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeEmailRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeEmailRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeEmailRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ChallengeTermsRequest.ChallengeTypePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ChallengeTermsRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ChallengeTermsRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ChallengeTermsRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.AssetAccount.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.AssetAccount.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.AssetAccount.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LegalAccountKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LegalAccountKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAccountDetails.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.FiatAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.FiatAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHAccountKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHAccountKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAccountDetails.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MarketAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MarketAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MarketAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Trade.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Trade.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.Trade.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.Trade.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.Trade.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MerchantCounterparty.KindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MerchantCounterparty.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MerchantCounterparty.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MerchantCounterparty.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MerchantCounterparty.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MerchantLocation.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MerchantLocation.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MerchantLocation.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.UserCounterparty.KindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.UserCounterparty.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.UserCounterparty.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.UserCounterparty.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.UserCounterparty.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCounterparty.KindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCounterparty.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ServiceCounterparty.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ServiceCounterparty.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ServiceCounterparty.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAsset.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAsset.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatAsset.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.FiatAsset.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.FiatAsset.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketTradeAsset.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MarketTradeAsset.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MarketTradeAsset.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MarketTradeAsset.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAsset.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAsset.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransportAsset.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransportAsset.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransportAsset.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Coordinates.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.Coordinates.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.Coordinates.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Address.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.Address.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.Address.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OtherAsset.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OtherAsset.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OtherAsset.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.OtherAsset.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.OtherAsset.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.NothingAsset.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.NothingAsset.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.NothingAsset.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.NothingAsset.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.NothingAsset.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TradeQuoteContext.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TradeQuoteContext.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TradeQuoteContext.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TradeRef.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TradeRef.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TradeRef.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAssetRef.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAssetRef.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatAssetRef.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.FiatAssetRef.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.FiatAssetRef.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAssetRef.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAssetRef.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MarketAssetRef.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MarketAssetRef.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MarketAssetRef.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAssetRef.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAssetRef.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransportAssetRef.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransportAssetRef.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransportAssetRef.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TradeQuoteRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TradeQuoteRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TradeQuoteRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatAssetQuoteRequest.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatAssetQuoteRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.FiatAssetQuoteRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.FiatAssetQuoteRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MarketAssetQuoteRequest.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MarketAssetQuoteRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MarketAssetQuoteRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MarketAssetQuoteRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransportAssetQuoteRequest.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransportAssetQuoteRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransportAssetQuoteRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransportAssetQuoteRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.NothingAssetQuoteRequest.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.NothingAssetQuoteRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.NothingAssetQuoteRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.NothingAssetQuoteRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TradeQuote.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TradeQuote.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TradeQuote.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Input.Query.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsAssetAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Input.Path.AssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountAssetAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.GainedAssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.LostAssetKindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Input.Query.CounterpartyKindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTrades.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsTrade.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccountsTradesQuotes.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.ConnectionResult : Swift.Equatable {}
extension Candle.ConnectionResult : Swift.Hashable {}
@available(iOS 17.0, macOS 14.0, *)
extension Candle.ActionSheet : Swift.Sendable {}
@available(macOS 14, iOS 17.0, *)
extension Candle.PresentationStyle : Swift.Equatable {}
@available(macOS 14, iOS 17.0, *)
extension Candle.PresentationStyle : Swift.Hashable {}
