// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature StrictConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature MemberImportVisibility -enable-bare-slash-regex -module-name _NIODataStructures -package-name swift_nio
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Darwin.C
import Darwin
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct PriorityQueue<Element> where Element : Swift.Comparable {
  public init()
  public mutating func remove(_ key: Element)
  @discardableResult
  public mutating func removeFirst(where shouldBeRemoved: (Element) throws -> Swift.Bool) rethrows -> Element?
  public mutating func push(_ key: Element)
  public func peek() -> Element?
  public var isEmpty: Swift.Bool {
    get
  }
  @discardableResult
  public mutating func pop() -> Element?
  public mutating func clear()
}
extension _NIODataStructures.PriorityQueue : Swift.Equatable {
  public static func == (lhs: _NIODataStructures.PriorityQueue<Element>, rhs: _NIODataStructures.PriorityQueue<Element>) -> Swift.Bool
}
extension _NIODataStructures.PriorityQueue : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public init(queue: _NIODataStructures.PriorityQueue<Element>)
    public mutating func next() -> Element?
  }
  public func makeIterator() -> _NIODataStructures.PriorityQueue<Element>.Iterator
}
extension _NIODataStructures.PriorityQueue {
  public var count: Swift.Int {
    get
  }
}
extension _NIODataStructures.PriorityQueue : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension _NIODataStructures.PriorityQueue : Swift.Sendable where Element : Swift.Sendable {
}
extension _NIODataStructures.PriorityQueue.Iterator : Swift.Sendable where Element : Swift.Sendable {
}
public struct _TinyArray<Element> {
}
extension _NIODataStructures._TinyArray : Swift.Equatable where Element : Swift.Equatable {
  public static func == (a: _NIODataStructures._TinyArray<Element>, b: _NIODataStructures._TinyArray<Element>) -> Swift.Bool
}
extension _NIODataStructures._TinyArray : Swift.Hashable where Element : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension _NIODataStructures._TinyArray : Swift.Sendable where Element : Swift.Sendable {
}
extension _NIODataStructures._TinyArray : Swift.RandomAccessCollection {
  public typealias Element = Element
  public typealias Index = Swift.Int
  public func makeIterator() -> _NIODataStructures._TinyArray<Element>.Iterator
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> Element?
  }
  public subscript(position: Swift.Int) -> Element {
    get
  }
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public typealias Indices = Swift.Range<_NIODataStructures._TinyArray<Element>.Index>
  public typealias SubSequence = Swift.Slice<_NIODataStructures._TinyArray<Element>>
}
extension _NIODataStructures._TinyArray.Iterator : Swift.Sendable where Element : Swift.Sendable {
}
extension _NIODataStructures._TinyArray {
  public init(_ elements: some Sequence<Element>)
  public init(_ elements: some Sequence<Result<Element, some Error>>) throws
  public init()
  public mutating func append(_ newElement: Element)
  public mutating func append(contentsOf newElements: some Sequence<Element>)
  @discardableResult
  public mutating func remove(at index: Swift.Int) -> Element
  public mutating func removeAll(where shouldBeRemoved: (Element) throws -> Swift.Bool) rethrows
  public mutating func sort(by areInIncreasingOrder: (Element, Element) throws -> Swift.Bool) rethrows
}
