// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature StrictConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature MemberImportVisibility -enable-bare-slash-regex -module-name NIOWebSocket -package-name swift_nio
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CNIOSHA1
import NIOCore
import NIOHTTP1
import Swift
import _Concurrency
import _NIOBase64
import _StringProcessing
import _SwiftConcurrencyShims
@available(*, deprecated, renamed: "NIOWebSocketClientUpgrader")
public typealias NIOWebClientSocketUpgrader = NIOWebSocket.NIOWebSocketClientUpgrader
final public class NIOWebSocketClientUpgrader : NIOHTTP1.NIOHTTPClientProtocolUpgrader, Swift.Sendable {
  final public let supportedProtocol: Swift.String
  final public let requiredUpgradeHeaders: [Swift.String]
  public init(requestKey: Swift.String = randomRequestKey(), maxFrameSize: Swift.Int = 1 << 14, automaticErrorHandling: Swift.Bool = true, upgradePipelineHandler: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPResponseHead) -> NIOCore.EventLoopFuture<Swift.Void>)
  final public func addCustom(upgradeRequestHeaders: inout NIOHTTP1.HTTPHeaders)
  final public func shouldAllowUpgrade(upgradeResponse: NIOHTTP1.HTTPResponseHead) -> Swift.Bool
  final public func upgrade(context: NIOCore.ChannelHandlerContext, upgradeResponse: NIOHTTP1.HTTPResponseHead) -> NIOCore.EventLoopFuture<Swift.Void>
  @objc deinit
}
@available(macOS 13, iOS 16, tvOS 16, watchOS 9, *)
final public class NIOTypedWebSocketClientUpgrader<UpgradeResult> : NIOHTTP1.NIOTypedHTTPClientProtocolUpgrader where UpgradeResult : Swift.Sendable {
  final public let supportedProtocol: Swift.String
  final public let requiredUpgradeHeaders: [Swift.String]
  public init(requestKey: Swift.String = NIOWebSocketClientUpgrader.randomRequestKey(), maxFrameSize: Swift.Int = 1 << 14, enableAutomaticErrorHandling: Swift.Bool = true, upgradePipelineHandler: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPResponseHead) -> NIOCore.EventLoopFuture<UpgradeResult>)
  final public func addCustom(upgradeRequestHeaders: inout NIOHTTP1.HTTPHeaders)
  final public func shouldAllowUpgrade(upgradeResponse: NIOHTTP1.HTTPResponseHead) -> Swift.Bool
  final public func upgrade(channel: any NIOCore.Channel, upgradeResponse: NIOHTTP1.HTTPResponseHead) -> NIOCore.EventLoopFuture<UpgradeResult>
  @objc deinit
}
@available(*, unavailable)
extension NIOWebSocket.NIOWebSocketClientUpgrader : Swift.Sendable {
}
extension NIOWebSocket.NIOWebSocketClientUpgrader {
  public static func randomRequestKey<Generator>(using generator: inout Generator) -> Swift.String where Generator : Swift.RandomNumberGenerator
  public static func randomRequestKey() -> Swift.String
}
final public class NIOWebSocketFrameAggregator : NIOCore.ChannelInboundHandler {
  public enum Error : Swift.Error {
    case nonFinalFragmentSizeIsTooSmall
    case tooManyFragments
    case accumulatedFrameSizeIsTooLarge
    case receivedNewFrameWithoutFinishingPrevious
    case didReceiveFragmentBeforeReceivingTextOrBinaryFrame
    public static func == (a: NIOWebSocket.NIOWebSocketFrameAggregator.Error, b: NIOWebSocket.NIOWebSocketFrameAggregator.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias InboundIn = NIOWebSocket.WebSocketFrame
  public typealias InboundOut = NIOWebSocket.WebSocketFrame
  public init(minNonFinalFragmentSize: Swift.Int, maxAccumulatedFrameCount: Swift.Int, maxAccumulatedFrameSize: Swift.Int)
  final public func channelRead(context: NIOCore.ChannelHandlerContext, data: NIOCore.NIOAny)
  public typealias OutboundOut = Swift.Never
  @objc deinit
}
@available(*, unavailable)
extension NIOWebSocket.NIOWebSocketFrameAggregator : Swift.Sendable {
}
@available(*, deprecated, renamed: "NIOWebSocketServerUpgrader")
public typealias WebSocketUpgrader = NIOWebSocket.NIOWebSocketServerUpgrader
public struct NIOWebSocketUpgradeError : Swift.Error, Swift.Equatable {
  public static let invalidUpgradeHeader: NIOWebSocket.NIOWebSocketUpgradeError
  public static let unsupportedWebSocketTarget: NIOWebSocket.NIOWebSocketUpgradeError
  public static func == (a: NIOWebSocket.NIOWebSocketUpgradeError, b: NIOWebSocket.NIOWebSocketUpgradeError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class NIOWebSocketServerUpgrader : NIOHTTP1.HTTPServerProtocolUpgrader, Swift.Sendable {
  final public let supportedProtocol: Swift.String
  final public let requiredUpgradeHeaders: [Swift.String]
  @preconcurrency convenience public init(automaticErrorHandling: Swift.Bool = true, shouldUpgrade: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<NIOHTTP1.HTTPHeaders?>, upgradePipelineHandler: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<Swift.Void>)
  @preconcurrency convenience public init(maxFrameSize: Swift.Int, automaticErrorHandling: Swift.Bool = true, shouldUpgrade: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<NIOHTTP1.HTTPHeaders?>, upgradePipelineHandler: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<Swift.Void>)
  final public func buildUpgradeResponse(channel: any NIOCore.Channel, upgradeRequest: NIOHTTP1.HTTPRequestHead, initialResponseHeaders: NIOHTTP1.HTTPHeaders) -> NIOCore.EventLoopFuture<NIOHTTP1.HTTPHeaders>
  final public func upgrade(context: NIOCore.ChannelHandlerContext, upgradeRequest: NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<Swift.Void>
  @objc deinit
}
final public class NIOTypedWebSocketServerUpgrader<UpgradeResult> : NIOHTTP1.NIOTypedHTTPServerProtocolUpgrader, Swift.Sendable where UpgradeResult : Swift.Sendable {
  final public let supportedProtocol: Swift.String
  final public let requiredUpgradeHeaders: [Swift.String]
  public init(maxFrameSize: Swift.Int = 1 << 14, enableAutomaticErrorHandling: Swift.Bool = true, shouldUpgrade: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<NIOHTTP1.HTTPHeaders?>, upgradePipelineHandler: @escaping @Sendable (any NIOCore.Channel, NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<UpgradeResult>)
  final public func buildUpgradeResponse(channel: any NIOCore.Channel, upgradeRequest: NIOHTTP1.HTTPRequestHead, initialResponseHeaders: NIOHTTP1.HTTPHeaders) -> NIOCore.EventLoopFuture<NIOHTTP1.HTTPHeaders>
  final public func upgrade(channel: any NIOCore.Channel, upgradeRequest: NIOHTTP1.HTTPRequestHead) -> NIOCore.EventLoopFuture<UpgradeResult>
  @objc deinit
}
public enum WebSocketErrorCode : Swift.Sendable {
  case normalClosure
  case goingAway
  case protocolError
  case unacceptableData
  case dataInconsistentWithMessage
  case policyViolation
  case messageTooLarge
  case missingExtension
  case unexpectedServerError
  case unknown(Swift.UInt16)
  public init(codeNumber: Swift.Int)
}
extension NIOWebSocket.WebSocketErrorCode : Swift.Equatable {
  public static func == (a: NIOWebSocket.WebSocketErrorCode, b: NIOWebSocket.WebSocketErrorCode) -> Swift.Bool
}
extension NIOCore.ByteBuffer {
  public mutating func readWebSocketErrorCode() -> NIOWebSocket.WebSocketErrorCode?
  public func getWebSocketErrorCode(at index: Swift.Int) -> NIOWebSocket.WebSocketErrorCode?
  public mutating func write(webSocketErrorCode code: NIOWebSocket.WebSocketErrorCode)
  public func peekWebSocketErrorCode() -> NIOWebSocket.WebSocketErrorCode?
}
extension Swift.UInt16 {
  public init(webSocketErrorCode code: NIOWebSocket.WebSocketErrorCode)
}
public struct WebSocketMaskingKey : Swift.Sendable {
  public init?<T>(_ buffer: T) where T : Swift.Collection, T.Element == Swift.UInt8
}
extension NIOWebSocket.WebSocketMaskingKey : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Swift.UInt8
  public init(arrayLiteral elements: Swift.UInt8...)
}
extension NIOWebSocket.WebSocketMaskingKey {
  public static func random<Generator>(using generator: inout Generator) -> NIOWebSocket.WebSocketMaskingKey where Generator : Swift.RandomNumberGenerator
  public static func random() -> NIOWebSocket.WebSocketMaskingKey
}
extension NIOWebSocket.WebSocketMaskingKey : Swift.Equatable {
  public static func == (lhs: NIOWebSocket.WebSocketMaskingKey, rhs: NIOWebSocket.WebSocketMaskingKey) -> Swift.Bool
}
extension NIOWebSocket.WebSocketMaskingKey : Swift.Collection {
  public typealias Element = Swift.UInt8
  public typealias Index = Swift.Int
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after: Swift.Int) -> Swift.Int
  public subscript(index: Swift.Int) -> Swift.UInt8 {
    get
  }
  public func withContiguousStorageIfAvailable<R>(_ body: (Swift.UnsafeBufferPointer<Swift.UInt8>) throws -> R) rethrows -> R?
  public typealias Indices = Swift.DefaultIndices<NIOWebSocket.WebSocketMaskingKey>
  public typealias Iterator = Swift.IndexingIterator<NIOWebSocket.WebSocketMaskingKey>
  public typealias SubSequence = Swift.Slice<NIOWebSocket.WebSocketMaskingKey>
}
public struct WebSocketFrame {
  public var maskKey: NIOWebSocket.WebSocketMaskingKey?
  public var fin: Swift.Bool {
    get
    set
  }
  public var rsv1: Swift.Bool {
    get
    set
  }
  public var rsv2: Swift.Bool {
    get
    set
  }
  public var rsv3: Swift.Bool {
    get
    set
  }
  public var opcode: NIOWebSocket.WebSocketOpcode {
    get
    set
  }
  public var length: Swift.Int {
    get
  }
  public var data: NIOCore.ByteBuffer {
    get
    set
  }
  public var extensionData: NIOCore.ByteBuffer? {
    get
    set
  }
  public var unmaskedData: NIOCore.ByteBuffer {
    get
  }
  public var unmaskedExtensionData: NIOCore.ByteBuffer? {
    get
  }
  public init(allocator: NIOCore.ByteBufferAllocator)
  public init(fin: Swift.Bool = false, rsv1: Swift.Bool = false, rsv2: Swift.Bool = false, rsv3: Swift.Bool = false, opcode: NIOWebSocket.WebSocketOpcode = .continuation, maskKey: NIOWebSocket.WebSocketMaskingKey? = nil, data: NIOCore.ByteBuffer, extensionData: NIOCore.ByteBuffer? = nil)
}
extension NIOWebSocket.WebSocketFrame : @unchecked Swift.Sendable {
}
extension NIOWebSocket.WebSocketFrame : Swift.Equatable {
  public static func == (a: NIOWebSocket.WebSocketFrame, b: NIOWebSocket.WebSocketFrame) -> Swift.Bool
}
extension NIOWebSocket.WebSocketFrame : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension NIOWebSocket.WebSocketFrame : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NIOWebSocket.WebSocketFrame {
  public struct ReservedBits : Swift.OptionSet, Swift.Sendable {
    public var rawValue: Swift.UInt8
    public init(rawValue: Swift.UInt8)
    public static var rsv1: NIOWebSocket.WebSocketFrame.ReservedBits {
      get
    }
    public static var rsv2: NIOWebSocket.WebSocketFrame.ReservedBits {
      get
    }
    public static var rsv3: NIOWebSocket.WebSocketFrame.ReservedBits {
      get
    }
    public static var all: NIOWebSocket.WebSocketFrame.ReservedBits {
      get
    }
    public typealias ArrayLiteralElement = NIOWebSocket.WebSocketFrame.ReservedBits
    public typealias Element = NIOWebSocket.WebSocketFrame.ReservedBits
    public typealias RawValue = Swift.UInt8
  }
  public var reservedBits: NIOWebSocket.WebSocketFrame.ReservedBits {
    get
    set
  }
}
public enum NIOWebSocketError : Swift.Error {
  case invalidFrameLength
  case fragmentedControlFrame
  case multiByteControlFrameLength
  public static func == (a: NIOWebSocket.NIOWebSocketError, b: NIOWebSocket.NIOWebSocketError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NIOCore.ByteBuffer {
  public mutating func webSocketUnmask(_ maskingKey: NIOWebSocket.WebSocketMaskingKey, indexOffset: Swift.Int = 0)
  public mutating func webSocketMask(_ maskingKey: NIOWebSocket.WebSocketMaskingKey, indexOffset: Swift.Int = 0)
}
final public class WebSocketFrameDecoder : NIOCore.ByteToMessageDecoder {
  public typealias InboundIn = NIOCore.ByteBuffer
  public typealias InboundOut = NIOWebSocket.WebSocketFrame
  public typealias OutboundOut = NIOWebSocket.WebSocketFrame
  public init(maxFrameSize: Swift.Int = 1 << 14)
  final public func decode(context: NIOCore.ChannelHandlerContext, buffer: inout NIOCore.ByteBuffer) throws -> NIOCore.DecodingState
  @objc deinit
}
@available(*, unavailable)
extension NIOWebSocket.WebSocketFrameDecoder : Swift.Sendable {
}
final public class WebSocketFrameEncoder : NIOCore.ChannelOutboundHandler {
  public typealias OutboundIn = NIOWebSocket.WebSocketFrame
  public typealias OutboundOut = NIOCore.ByteBuffer
  public init()
  final public func handlerAdded(context: NIOCore.ChannelHandlerContext)
  final public func handlerRemoved(context: NIOCore.ChannelHandlerContext)
  final public func write(context: NIOCore.ChannelHandlerContext, data: NIOCore.NIOAny, promise: NIOCore.EventLoopPromise<Swift.Void>?)
  @objc deinit
}
@available(*, unavailable)
extension NIOWebSocket.WebSocketFrameEncoder : Swift.Sendable {
}
public struct WebSocketOpcode : Swift.Sendable {
  public static let continuation: NIOWebSocket.WebSocketOpcode
  public static let text: NIOWebSocket.WebSocketOpcode
  public static let binary: NIOWebSocket.WebSocketOpcode
  public static let connectionClose: NIOWebSocket.WebSocketOpcode
  public static let ping: NIOWebSocket.WebSocketOpcode
  public static let pong: NIOWebSocket.WebSocketOpcode
  public init?(encodedWebSocketOpcode encoded: Swift.UInt8)
  public var isControlOpcode: Swift.Bool {
    get
  }
}
extension NIOWebSocket.WebSocketOpcode : Swift.Equatable {
  public static func == (a: NIOWebSocket.WebSocketOpcode, b: NIOWebSocket.WebSocketOpcode) -> Swift.Bool
}
extension NIOWebSocket.WebSocketOpcode : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NIOWebSocket.WebSocketOpcode : Swift.CaseIterable {
  public static var allCases: [NIOWebSocket.WebSocketOpcode] {
    get
    @available(*, deprecated)
    set
  }
  public typealias AllCases = [NIOWebSocket.WebSocketOpcode]
}
extension NIOWebSocket.WebSocketOpcode : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Swift.UInt8 {
  public init(webSocketOpcode opcode: NIOWebSocket.WebSocketOpcode)
}
extension Swift.Int {
  public init(webSocketOpcode opcode: NIOWebSocket.WebSocketOpcode)
}
final public class WebSocketProtocolErrorHandler : NIOCore.ChannelInboundHandler {
  public typealias InboundIn = Swift.Never
  public typealias OutboundOut = NIOWebSocket.WebSocketFrame
  public init()
  public init(isServer: Swift.Bool)
  final public func errorCaught(context: NIOCore.ChannelHandlerContext, error: any Swift.Error)
  public typealias InboundOut = Swift.Never
  @objc deinit
}
@available(*, unavailable)
extension NIOWebSocket.WebSocketProtocolErrorHandler : Swift.Sendable {
}
extension NIOWebSocket.NIOWebSocketFrameAggregator.Error : Swift.Equatable {}
extension NIOWebSocket.NIOWebSocketFrameAggregator.Error : Swift.Hashable {}
extension NIOWebSocket.NIOWebSocketError : Swift.Equatable {}
extension NIOWebSocket.NIOWebSocketError : Swift.Hashable {}
