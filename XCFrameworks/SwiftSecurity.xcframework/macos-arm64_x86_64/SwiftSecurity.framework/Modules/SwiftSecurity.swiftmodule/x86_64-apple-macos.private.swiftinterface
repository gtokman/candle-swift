// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-macos11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature StrictConcurrency -enable-bare-slash-regex -module-name SwiftSecurity -package-name swift_security
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CryptoKit
import Foundation
import LocalAuthentication
import Security
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol SecCertificateConvertible : SwiftSecurity.SecCertificateRepresentable {
  init<Bytes>(derRepresentation: Bytes) throws where Bytes : Foundation.ContiguousBytes
  var derRepresentation: Foundation.Data { get }
}
extension SwiftSecurity.Certificate : SwiftSecurity.SecCertificateConvertible {
}
public protocol SecCertificateRepresentable {
  init(certificate secCertificate: Security.SecCertificate)
  var secCertificate: Security.SecCertificate { get }
}
extension SwiftSecurity.SecCertificateConvertible {
  public init(certificate secCertificate: Security.SecCertificate)
  public var secCertificate: Security.SecCertificate {
    get
  }
}
public protocol SecDataConvertible {
  init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  var rawRepresentation: Foundation.Data { get }
}
extension CryptoKit.Curve25519.KeyAgreement.PrivateKey : SwiftSecurity.SecDataConvertible {
}
extension CryptoKit.Curve25519.KeyAgreement.PublicKey : SwiftSecurity.SecDataConvertible {
}
extension CryptoKit.Curve25519.Signing.PrivateKey : SwiftSecurity.SecDataConvertible {
}
extension CryptoKit.Curve25519.Signing.PublicKey : SwiftSecurity.SecDataConvertible {
}
extension CryptoKit.SymmetricKey : SwiftSecurity.SecDataConvertible {
  public init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  public var rawRepresentation: Foundation.Data {
    get
  }
}
extension CryptoKit.SecureEnclave.P256.KeyAgreement.PrivateKey : SwiftSecurity.SecDataConvertible {
  public init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  public var rawRepresentation: Foundation.Data {
    get
  }
}
extension CryptoKit.SecureEnclave.P256.Signing.PrivateKey : SwiftSecurity.SecDataConvertible {
  public init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  public var rawRepresentation: Foundation.Data {
    get
  }
}
extension Foundation.Data : SwiftSecurity.SecDataConvertible {
  public init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  public var rawRepresentation: Foundation.Data {
    get
  }
}
extension Swift.String : SwiftSecurity.SecDataConvertible {
  public init<D>(rawRepresentation data: D) throws where D : Foundation.ContiguousBytes
  public var rawRepresentation: Foundation.Data {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SecIdentityConvertible<Certificate> : SwiftSecurity.SecIdentityRepresentable {
  associatedtype Certificate : SwiftSecurity.SecCertificateConvertible
}
#else
public protocol SecIdentityConvertible : SwiftSecurity.SecIdentityRepresentable {
  associatedtype Certificate : SwiftSecurity.SecCertificateConvertible
}
#endif
extension SwiftSecurity.DigitalIdentity : SwiftSecurity.SecIdentityConvertible {
  public typealias Certificate = SwiftSecurity.Certificate
}
public protocol SecIdentityRepresentable {
  init(identity secIdentity: Security.SecIdentity)
  var secIdentity: Security.SecIdentity { get throws }
}
public protocol SecKeyConvertible : SwiftSecurity.SecKeyRepresentable {
  init<Bytes>(x963Representation: Bytes) throws where Bytes : Foundation.ContiguousBytes
  init<Bytes>(derRepresentation: Bytes) throws where Bytes : Swift.RandomAccessCollection, Bytes.Element == Swift.UInt8
  var x963Representation: Foundation.Data { get }
  var derRepresentation: Foundation.Data { get }
}
extension CryptoKit.P256.Signing.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P256.Signing.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P256.KeyAgreement.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P256.KeyAgreement.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P384.Signing.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P384.Signing.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P384.KeyAgreement.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P384.KeyAgreement.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P521.Signing.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P521.Signing.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P521.KeyAgreement.PrivateKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
extension CryptoKit.P521.KeyAgreement.PublicKey : SwiftSecurity.SecKeyConvertible {
  public static var keyDescriptor: SwiftSecurity.SecKeyDescriptor {
    get
  }
}
public protocol SecKeyRepresentable {
  static var keyDescriptor: SwiftSecurity.SecKeyDescriptor { get }
  var secKey: Security.SecKey { get throws }
}
extension SwiftSecurity.SecKeyConvertible {
  public var secKey: Security.SecKey {
    get throws
  }
  public var keyType: SwiftSecurity.KeyType {
    get
  }
  public var keyClass: SwiftSecurity.KeyClass {
    get
  }
}
public struct SecKeyDescriptor : Swift.Sendable {
  public let keyType: SwiftSecurity.KeyType
  public let keyClass: SwiftSecurity.KeyClass
  public static let ecPrivateKey: SwiftSecurity.SecKeyDescriptor
  public static let ecPublicKey: SwiftSecurity.SecKeyDescriptor
  public static let rsaPrivateKey: SwiftSecurity.SecKeyDescriptor
  public static let rsaPublicKey: SwiftSecurity.SecKeyDescriptor
  public init(keyType: SwiftSecurity.KeyType, keyClass: SwiftSecurity.KeyClass)
}
public enum AccessGroup : Swift.Hashable, Swift.Codable, Swift.Sendable {
  case `default`
  case keychainGroup(teamID: Swift.String, nameID: Swift.String)
  @available(macOS, unavailable, message: "Use `keychainGroup(teamID:nameID:)`")
  case appGroupID(_: Swift.String)
  case token
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSecurity.AccessGroup, b: SwiftSecurity.AccessGroup) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftSecurity.AccessGroup {
  public var rawValue: Swift.String? {
    get
  }
}
public struct Keychain : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public init(accessGroup: SwiftSecurity.AccessGroup)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSecurity.Keychain, b: SwiftSecurity.Keychain) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftSecurity.Keychain {
  public static let `default`: SwiftSecurity.Keychain
}
extension SwiftSecurity.Keychain : SwiftSecurity.SecItemStore {
  public func retrieve<SecItem>(_ returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SecItem>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> SwiftSecurity.SecValue<SecItem>? where SecItem : SwiftSecurity.SecItem
  public func retrieve<SecItem>(_ returnType: SwiftSecurity.SecReturnType, matching value: SwiftSecurity.SecValue<SecItem>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> SwiftSecurity.SecValue<SecItem>? where SecItem : SwiftSecurity.SecItem
  public func retrieveAll<SecItem>(_ returnType: SwiftSecurity.SecReturnType = .all, query: SwiftSecurity.SecItemQuery<SecItem>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> [SwiftSecurity.SecValue<SecItem>] where SecItem : SwiftSecurity.SecItem
  @discardableResult
  public func remove<SecItem>(_ query: SwiftSecurity.SecItemQuery<SecItem>) throws -> Swift.Bool where SecItem : SwiftSecurity.SecItem
  @discardableResult
  public func remove<SecItem>(matching value: SwiftSecurity.SecValue<SecItem>) throws -> Swift.Bool where SecItem : SwiftSecurity.SecItem
  public func update<SecItem>(_ value: SwiftSecurity.SecValue<SecItem>, query: SwiftSecurity.SecItemQuery<SecItem>) throws -> Swift.Bool where SecItem : SwiftSecurity.SecItem
  public func removeAll(includingSynchronizableCredentials: Swift.Bool = false) throws
}
extension SwiftSecurity.Keychain : SwiftSecurity.SecDataStore {
  public func store<T>(_ data: T, query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws where T : SwiftSecurity.SecDataConvertible
  public func store<T>(_ data: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws -> SwiftSecurity.SecValue<SwiftSecurity.GenericPassword>? where T : SwiftSecurity.SecDataConvertible
  public func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> T? where T : SwiftSecurity.SecDataConvertible
  public func update<T>(_ data: T, query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>) throws -> Swift.Bool where T : SwiftSecurity.SecDataConvertible
}
extension SwiftSecurity.Keychain {
  public func store<T>(_ data: T, query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws where T : SwiftSecurity.SecDataConvertible
  public func store<T>(_ data: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws -> SwiftSecurity.SecValue<SwiftSecurity.InternetPassword>? where T : SwiftSecurity.SecDataConvertible
  public func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> T? where T : SwiftSecurity.SecDataConvertible
}
extension SwiftSecurity.Keychain : SwiftSecurity.SecKeyStore {
  public func store<T>(_ key: T, query: SwiftSecurity.SecItemQuery<Security.SecKey>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws where T : SwiftSecurity.SecKeyConvertible
  public func store<T>(_ key: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<Security.SecKey>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws -> SwiftSecurity.SecValue<Security.SecKey>? where T : SwiftSecurity.SecKeyConvertible
  public func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecKey>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> T? where T : SwiftSecurity.SecKeyConvertible
}
extension SwiftSecurity.Keychain : SwiftSecurity.SecCertificateStore {
  public func store<T>(_ certificate: T, query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws where T : SwiftSecurity.SecCertificateConvertible
  public func store<T>(_ certificate: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws -> SwiftSecurity.SecValue<Security.SecCertificate>? where T : SwiftSecurity.SecCertificateConvertible
  public func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> T? where T : SwiftSecurity.SecCertificateConvertible
}
extension SwiftSecurity.Keychain : SwiftSecurity.SecIdentityStore {
  public func store<T>(_ identity: T, query: SwiftSecurity.SecItemQuery<Security.SecIdentity>, accessPolicy: SwiftSecurity.AccessPolicy = .default) throws where T : SwiftSecurity.SecIdentityConvertible
  public func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecIdentity>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> T? where T : SwiftSecurity.SecIdentityConvertible
}
extension SwiftSecurity.Keychain : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftSecurity.Keychain : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public protocol SecItem {
}
public protocol SecData : SwiftSecurity.SecItem {
}
public struct GenericPassword : SwiftSecurity.SecData {
}
public struct InternetPassword : SwiftSecurity.SecData {
}
extension Security.SecKey : SwiftSecurity.SecItem {
}
extension Security.SecCertificate : SwiftSecurity.SecItem {
}
extension Security.SecIdentity : SwiftSecurity.SecItem {
}
public typealias PrimaryKey<Value> = Value
public struct SecReturnType : Swift.OptionSet, Swift.Sendable {
  public static let data: SwiftSecurity.SecReturnType
  public static let info: SwiftSecurity.SecReturnType
  public static let reference: SwiftSecurity.SecReturnType
  public static let persistentReference: SwiftSecurity.SecReturnType
  public static let all: SwiftSecurity.SecReturnType
  public var rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public typealias ArrayLiteralElement = SwiftSecurity.SecReturnType
  public typealias Element = SwiftSecurity.SecReturnType
  public typealias RawValue = Swift.UInt
}
public enum SecValue<Value> where Value : SwiftSecurity.SecItem {
  case data(Foundation.Data)
  case dictionary(SwiftSecurity.SecItemInfo<Value>)
  case reference(Value)
  case persistentReference(Foundation.Data)
}
extension SwiftSecurity.SecValue : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftSecurity.SecValue : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(*, deprecated, renamed: "AccessPolicy")
public typealias SecAccessPolicy = SwiftSecurity.AccessPolicy
public struct AccessPolicy : Swift.Equatable, Swift.Sendable {
  public let protection: SwiftSecurity.AccessPolicy.Accessibility
  public let options: SwiftSecurity.AccessPolicy.Options?
  public init(_ protection: SwiftSecurity.AccessPolicy.Accessibility, options: SwiftSecurity.AccessPolicy.Options? = nil)
  public static func == (a: SwiftSecurity.AccessPolicy, b: SwiftSecurity.AccessPolicy) -> Swift.Bool
}
extension SwiftSecurity.AccessPolicy {
  public static let `default`: SwiftSecurity.AccessPolicy
}
extension SwiftSecurity.AccessPolicy {
  public enum Accessibility : Swift.Sendable {
    case whenPasscodeSetThisDeviceOnly
    case whenUnlockedThisDeviceOnly
    case whenUnlocked
    case afterFirstUnlockThisDeviceOnly
    case afterFirstUnlock
  }
}
extension SwiftSecurity.AccessPolicy {
  public struct Options : Swift.OptionSet, Swift.Sendable {
    public static let userPresence: SwiftSecurity.AccessPolicy.Options
    public static let biometryAny: SwiftSecurity.AccessPolicy.Options
    public static let biometryCurrentSet: SwiftSecurity.AccessPolicy.Options
    public static let devicePasscode: SwiftSecurity.AccessPolicy.Options
    @available(macOS 10.15, macCatalyst 13.0, *)
    @available(iOS, unavailable)
    @available(watchOS, unavailable)
    @available(tvOS, unavailable)
    public static let watch: SwiftSecurity.AccessPolicy.Options
    public static let or: SwiftSecurity.AccessPolicy.Options
    public static let and: SwiftSecurity.AccessPolicy.Options
    public static let privateKeyUsage: SwiftSecurity.AccessPolicy.Options
    public static let applicationPassword: SwiftSecurity.AccessPolicy.Options
    public let rawValue: Swift.UInt
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = SwiftSecurity.AccessPolicy.Options
    public typealias Element = SwiftSecurity.AccessPolicy.Options
    public typealias RawValue = Swift.UInt
  }
}
extension SwiftSecurity.AccessPolicy.Accessibility : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum AuthenticationType : Swift.Sendable {
  case ntlm
  case msn
  case dpa
  case rpa
  case httpBasic
  case httpDigest
  case htmlForm
  case `default`
}
extension SwiftSecurity.AuthenticationType : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum KeyClass : Swift.Sendable {
  case `public`
  case `private`
}
extension SwiftSecurity.KeyClass : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
@available(*, renamed: "KeyType")
public typealias KeyCipher = SwiftSecurity.KeyType
public enum KeyType : Swift.Sendable {
  case rsa
  case ecsecPrimeRandom
}
extension SwiftSecurity.KeyType : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum ProtocolType : Swift.Sendable {
  case ftp
  case ftpAccount
  case http
  case irc
  case nntp
  case pop3
  case smtp
  case socks
  case imap
  case ldap
  case appleTalk
  case afp
  case telnet
  case ssh
  case ftps
  case https
  case httpProxy
  case httpsProxy
  case ftpProxy
  case smb
  case rtsp
  case rtspProxy
  case daap
  case eppc
  case ipp
  case nntps
  case ldaps
  case telnetS
  case imaps
  case ircs
  case pop3S
}
extension SwiftSecurity.ProtocolType : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum TokenID {
  case secureEnclave
}
extension SwiftSecurity.TokenID : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public struct SecImportItemInfo {
}
extension SwiftSecurity.SecImportItemInfo {
  public var label: Swift.String? {
    get
  }
  public var keyID: Foundation.Data? {
    get
  }
  public var trust: Security.SecTrust? {
    get
  }
  public var certChain: [SwiftSecurity.Certificate] {
    get
  }
  public var identity: SwiftSecurity.DigitalIdentity? {
    get
  }
}
extension SwiftSecurity.SecImportItemInfo {
  public subscript(attribute: Swift.String) -> Any? {
    get
    set
  }
}
public struct SecItemInfo<Value> : Swift.RawRepresentable where Value : SwiftSecurity.SecItem {
  public let rawValue: [Swift.String : Any]
  public init(rawValue: [Swift.String : Any])
  public typealias RawValue = [Swift.String : Any]
}
extension SwiftSecurity.SecItemInfo {
  public var accessGroup: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var accessControl: Security.SecAccessControl? {
    get
  }
  public var accessible: SwiftSecurity.AccessPolicy.Accessibility? {
    get
  }
  public var synchronizable: SwiftSecurity.PrimaryKey<Swift.Bool>? {
    get
  }
  public var label: Swift.String? {
    get
  }
  public var data: Foundation.Data? {
    get
  }
  public var reference: Value? {
    get
  }
  public var persistentReference: Foundation.Data? {
    get
  }
}
extension SwiftSecurity.SecItemInfo where Value == SwiftSecurity.GenericPassword {
  public var account: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var service: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var generic: Foundation.Data? {
    get
  }
}
extension SwiftSecurity.SecItemInfo where Value == SwiftSecurity.InternetPassword {
  public var account: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var authenticationType: SwiftSecurity.PrimaryKey<SwiftSecurity.AuthenticationType>? {
    get
  }
  public var path: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var port: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
  }
  public var `protocol`: SwiftSecurity.PrimaryKey<SwiftSecurity.ProtocolType>? {
    get
  }
  public var securityDomain: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
  public var server: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
  }
}
extension SwiftSecurity.SecItemInfo where Value : SwiftSecurity.SecData {
  public var creationDate: Foundation.Date? {
    get
  }
  public var modificationDate: Foundation.Date? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var comment: Swift.String? {
    get
  }
  public var creator: Darwin.FourCharCode? {
    get
  }
  public var type: Darwin.FourCharCode? {
    get
  }
  public var isInvisible: Swift.Bool? {
    get
  }
  public var isNegative: Swift.Bool? {
    get
  }
}
extension SwiftSecurity.SecItemInfo where Value == Security.SecKey {
  public var applicationLabel: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
  }
  public var applicationTag: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
  }
  public var keyClass: SwiftSecurity.PrimaryKey<SwiftSecurity.KeyClass>? {
    get
  }
  public var keyType: SwiftSecurity.PrimaryKey<SwiftSecurity.KeyType>? {
    get
  }
  public var keySizeInBits: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
  }
  public var effectiveKeySize: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
  }
  public var isPermament: Swift.Bool? {
    get
  }
  public var canEncrypt: Swift.Bool? {
    get
  }
  public var canDecrypt: Swift.Bool? {
    get
  }
  public var canDerive: Swift.Bool? {
    get
  }
  public var canSign: Swift.Bool? {
    get
  }
  public var canVerify: Swift.Bool? {
    get
  }
  public var canWrap: Swift.Bool? {
    get
  }
  public var canUnwrap: Swift.Bool? {
    get
  }
}
extension SwiftSecurity.SecItemInfo where Value == Security.SecCertificate {
  public var certificateType: SwiftSecurity.PrimaryKey<Foundation.NSNumber>? {
    get
  }
  public var issuer: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
  }
  public var serialNumber: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
  }
  public var certificateEncoding: Foundation.NSNumber? {
    get
  }
  public var subject: Foundation.Data? {
    get
  }
  public var subjectKeyID: Foundation.Data? {
    get
  }
  public var publicKeyHash: Foundation.Data? {
    get
  }
}
extension SwiftSecurity.SecItemInfo : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftSecurity.SecItemInfo {
  public subscript(attribute: Swift.String) -> Any? {
    get
  }
}
public struct SecItemQuery<Value> where Value : SwiftSecurity.SecItem {
}
extension SwiftSecurity.SecItemQuery {
  public static func credential(for service: Swift.String, synchronizable: Swift.Bool? = nil) -> SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword> where Value == SwiftSecurity.GenericPassword
  public static func credential(for user: Swift.String, space: SwiftSecurity.WebProtectionSpace, synchronizable: Swift.Bool? = nil) -> SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword> where Value == SwiftSecurity.InternetPassword
  public static func key(for applicationTag: Swift.String? = nil, descriptor: SwiftSecurity.SecKeyDescriptor = .ecPrivateKey, synchronizable: Swift.Bool? = nil) -> SwiftSecurity.SecItemQuery<Security.SecKey> where Value == Security.SecKey
  public static func certificate(for label: Swift.String? = nil, synchronizable: Swift.Bool? = nil) -> SwiftSecurity.SecItemQuery<Security.SecCertificate> where Value == Security.SecCertificate
  public static func identity(for label: Swift.String? = nil, synchronizable: Swift.Bool? = nil) -> SwiftSecurity.SecItemQuery<Security.SecIdentity> where Value == Security.SecIdentity
}
extension SwiftSecurity.SecItemQuery {
  public init() where Value == SwiftSecurity.GenericPassword
  public init() where Value == SwiftSecurity.InternetPassword
  public init() where Value == Security.SecKey
  public init() where Value == Security.SecCertificate
  public init() where Value == Security.SecIdentity
}
extension SwiftSecurity.SecItemQuery {
  public var synchronizable: SwiftSecurity.PrimaryKey<Swift.Bool>? {
    get
    set
  }
  public var label: Swift.String? {
    get
    set
  }
}
extension SwiftSecurity.SecItemQuery where Value == SwiftSecurity.GenericPassword {
  public var account: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
  public var service: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
  public var generic: Foundation.Data? {
    get
    set
  }
}
extension SwiftSecurity.SecItemQuery where Value == SwiftSecurity.InternetPassword {
  public var account: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
  public var authenticationType: SwiftSecurity.PrimaryKey<SwiftSecurity.AuthenticationType>? {
    get
    set
  }
  public var path: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
  public var port: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
    set
  }
  public var `protocol`: SwiftSecurity.PrimaryKey<SwiftSecurity.ProtocolType>? {
    get
    set
  }
  public var securityDomain: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
  public var server: SwiftSecurity.PrimaryKey<Swift.String>? {
    get
    set
  }
}
extension SwiftSecurity.SecItemQuery where Value : SwiftSecurity.SecData {
  public var description: Swift.String? {
    get
    set
  }
  public var comment: Swift.String? {
    get
    set
  }
  public var creator: Darwin.FourCharCode? {
    get
    set
  }
  public var type: Darwin.FourCharCode? {
    get
    set
  }
  public var isInvisible: Swift.Bool? {
    get
    set
  }
  public var isNegative: Swift.Bool? {
    get
    set
  }
}
extension SwiftSecurity.SecItemQuery where Value == Security.SecKey {
  public var applicationLabel: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
    set
  }
  public var applicationTag: SwiftSecurity.PrimaryKey<Foundation.Data>? {
    get
    set
  }
  public var keyClass: SwiftSecurity.PrimaryKey<SwiftSecurity.KeyClass>? {
    get
    set
  }
  public var keyType: SwiftSecurity.PrimaryKey<SwiftSecurity.KeyType>? {
    get
    set
  }
  public var keySizeInBits: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
    set
  }
  public var effectiveKeySize: SwiftSecurity.PrimaryKey<Swift.Int>? {
    get
    set
  }
  public var tokenID: SwiftSecurity.TokenID? {
    get
    set
  }
  public var canEncrypt: Swift.Bool? {
    get
    set
  }
  public var canDecrypt: Swift.Bool? {
    get
    set
  }
  public var canDerive: Swift.Bool? {
    get
    set
  }
  public var canSign: Swift.Bool? {
    get
    set
  }
  public var canVerify: Swift.Bool? {
    get
    set
  }
  public var canWrap: Swift.Bool? {
    get
    set
  }
  public var canUnwrap: Swift.Bool? {
    get
    set
  }
}
extension SwiftSecurity.SecItemQuery : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftSecurity.SecItemQuery {
  public subscript(attribute: Swift.String) -> Any? {
    get
    set
  }
}
public protocol SecItemStore {
  func retrieve<SecItem>(_ returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SecItem>, authenticationContext: LocalAuthentication.LAContext?) throws -> SwiftSecurity.SecValue<SecItem>? where SecItem : SwiftSecurity.SecItem
  func retrieve<SecItem>(_ returnType: SwiftSecurity.SecReturnType, matching value: SwiftSecurity.SecValue<SecItem>, authenticationContext: LocalAuthentication.LAContext?) throws -> SwiftSecurity.SecValue<SecItem>? where SecItem : SwiftSecurity.SecItem
  func retrieveAll<SecItem>(_ returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SecItem>, authenticationContext: LocalAuthentication.LAContext?) throws -> [SwiftSecurity.SecValue<SecItem>] where SecItem : SwiftSecurity.SecItem
  func remove<SecItem>(_ query: SwiftSecurity.SecItemQuery<SecItem>) throws -> Swift.Bool where SecItem : SwiftSecurity.SecItem
  func remove<SecItem>(matching value: SwiftSecurity.SecValue<SecItem>) throws -> Swift.Bool where SecItem : SwiftSecurity.SecItem
  func removeAll(includingSynchronizableCredentials: Swift.Bool) throws
}
extension SwiftSecurity.SecItemStore {
  public func info<SecItem>(for query: SwiftSecurity.SecItemQuery<SecItem>, authenticationContext: LocalAuthentication.LAContext? = nil) throws -> SwiftSecurity.SecItemInfo<SecItem>? where SecItem : SwiftSecurity.SecItem
}
public protocol SecDataStore : SwiftSecurity.SecItemStore {
  func store<T>(_ data: T, query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, accessPolicy: SwiftSecurity.AccessPolicy) throws where T : SwiftSecurity.SecDataConvertible
  func store<T>(_ data: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, accessPolicy: SwiftSecurity.AccessPolicy) throws -> SwiftSecurity.SecValue<SwiftSecurity.GenericPassword>? where T : SwiftSecurity.SecDataConvertible
  func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, authenticationContext: LocalAuthentication.LAContext?) throws -> T? where T : SwiftSecurity.SecDataConvertible
  func store<T>(_ data: T, query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, accessPolicy: SwiftSecurity.AccessPolicy) throws where T : SwiftSecurity.SecDataConvertible
  func store<T>(_ data: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, accessPolicy: SwiftSecurity.AccessPolicy) throws -> SwiftSecurity.SecValue<SwiftSecurity.InternetPassword>? where T : SwiftSecurity.SecDataConvertible
  func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>, authenticationContext: LocalAuthentication.LAContext?) throws -> T? where T : SwiftSecurity.SecDataConvertible
}
extension SwiftSecurity.SecDataStore {
  public func retrieve(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>) throws -> Foundation.Data?
  public func retrieve(_ query: SwiftSecurity.SecItemQuery<SwiftSecurity.InternetPassword>) throws -> Foundation.Data?
}
public protocol SecKeyStore : SwiftSecurity.SecItemStore {
  func store<T>(_ key: T, query: SwiftSecurity.SecItemQuery<Security.SecKey>, accessPolicy: SwiftSecurity.AccessPolicy) throws where T : SwiftSecurity.SecKeyConvertible
  func store<T>(_ key: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<Security.SecKey>, accessPolicy: SwiftSecurity.AccessPolicy) throws -> SwiftSecurity.SecValue<Security.SecKey>? where T : SwiftSecurity.SecKeyConvertible
  func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecKey>, authenticationContext: LocalAuthentication.LAContext?) throws -> T? where T : SwiftSecurity.SecKeyConvertible
}
public protocol SecCertificateStore : SwiftSecurity.SecItemStore {
  func store<T>(_ certificate: T, query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, accessPolicy: SwiftSecurity.AccessPolicy) throws where T : SwiftSecurity.SecCertificateConvertible
  func store<T>(_ certificate: T, returning returnType: SwiftSecurity.SecReturnType, query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, accessPolicy: SwiftSecurity.AccessPolicy) throws -> SwiftSecurity.SecValue<Security.SecCertificate>? where T : SwiftSecurity.SecCertificateConvertible
  func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecCertificate>, authenticationContext: LocalAuthentication.LAContext?) throws -> T? where T : SwiftSecurity.SecCertificateConvertible
}
public protocol SecIdentityStore : SwiftSecurity.SecItemStore {
  func store<T>(_ identity: T, query: SwiftSecurity.SecItemQuery<Security.SecIdentity>, accessPolicy: SwiftSecurity.AccessPolicy) throws where T : SwiftSecurity.SecIdentityConvertible
  func retrieve<T>(_ query: SwiftSecurity.SecItemQuery<Security.SecIdentity>, authenticationContext: LocalAuthentication.LAContext?) throws -> T? where T : SwiftSecurity.SecIdentityConvertible
}
public protocol RandomDataGenerator {
  mutating func next() throws -> Foundation.Data
}
public struct SecureRandomDataGenerator {
  public let count: Swift.Int
  public init(count: Swift.Int)
}
extension SwiftSecurity.SecureRandomDataGenerator : SwiftSecurity.RandomDataGenerator {
  public func next() throws -> Foundation.Data
}
public struct Certificate {
  public let derRepresentation: Foundation.Data
  public let secCertificate: Security.SecCertificate
  public init<Bytes>(derRepresentation data: Bytes) throws where Bytes : Foundation.ContiguousBytes
  public init(certificate secCertificate: Security.SecCertificate)
}
extension SwiftSecurity.Certificate {
  public var subjectSummary: Swift.String? {
    get
  }
  public var commonName: Swift.String? {
    get throws
  }
  public var emailAddresses: [Swift.String] {
    get throws
  }
  public var normalizedIssuerSequence: Foundation.Data? {
    get throws
  }
  public var normalizedSubjectSequence: Foundation.Data? {
    get throws
  }
  public var serialNumberData: Foundation.Data? {
    get throws
  }
  public var publicKey: Foundation.Data {
    get throws
  }
}
@available(*, renamed: "DigitalIdentity")
public typealias Identity = SwiftSecurity.DigitalIdentity
public struct DigitalIdentity {
  public init(identity secIdentity: Security.SecIdentity)
  public let secIdentity: Security.SecIdentity
}
extension SwiftSecurity.DigitalIdentity {
  public var certificate: SwiftSecurity.DigitalIdentity.Certificate {
    get throws
  }
  public var privateKey: Foundation.Data {
    get throws
  }
}
extension SwiftSecurity.DigitalIdentity {
  public var secKey: Security.SecKey {
    get throws
  }
}
public enum PKCS12 {
  public static func `import`(_ data: Foundation.Data, passphrase: Swift.String) throws -> [SwiftSecurity.SecImportItemInfo]
}
public struct WebProtectionSpace : Swift.Equatable, Swift.Sendable {
  public var host: Swift.String {
    get
  }
  public var port: Swift.Int? {
    get
  }
  public var path: Swift.String? {
    get
  }
  public var `protocol`: SwiftSecurity.ProtocolType? {
    get
  }
  public var securityDomain: Swift.String? {
    get
  }
  public var authenticationType: SwiftSecurity.AuthenticationType? {
    get
  }
  public init(host: Swift.String, port: Swift.Int? = nil, protocol: SwiftSecurity.ProtocolType? = nil, authenticationType: SwiftSecurity.AuthenticationType? = nil, path: Swift.String? = nil, securityDomain: Swift.String? = nil)
  public static func == (a: SwiftSecurity.WebProtectionSpace, b: SwiftSecurity.WebProtectionSpace) -> Swift.Bool
}
extension SwiftSecurity.WebProtectionSpace {
  public static func website(_ fqdn: Swift.String) -> SwiftSecurity.WebProtectionSpace
}
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct SharedWebCredential {
}
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftSecurity.SharedWebCredential {
  public static func generatePassword() -> Swift.String
}
public enum SwiftSecurityError : Swift.Error {
  case missingEntitlement
  case notAvailable
  case duplicateItem
  case invalidParameter
  case authFailed
  case interactionRequired
  case interactionNotAllowed
  case userCanceled
  case keySizeNotAllowed
  case dataNotAvailable
  case invalidCertificate
  case pkcs12VerifyFailure
  case unimplemented
  case underlyingSecurityError(error: Swift.Int32)
}
extension SwiftSecurity.SwiftSecurityError {
  public init(rawValue: Swift.Int32)
}
extension SwiftSecurity.SwiftSecurityError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@propertyWrapper @_Concurrency.MainActor @preconcurrency public struct Credential<Value> : SwiftUICore.DynamicProperty where Value : SwiftSecurity.SecDataConvertible {
  @_Concurrency.MainActor @preconcurrency public var wrappedValue: Value? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var projectedValue: SwiftSecurity.Credential<Value> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var fetchError: (any Swift.Error)? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func store(_ value: Value?) throws
  @_Concurrency.MainActor @preconcurrency public func remove() throws
  @_Concurrency.MainActor @preconcurrency public init(_ service: Swift.String, synchronizable: Swift.Bool? = nil, store: SwiftSecurity.Keychain = .default)
  @_Concurrency.MainActor @preconcurrency public init(query: SwiftSecurity.SecItemQuery<SwiftSecurity.GenericPassword>, store: SwiftSecurity.Keychain = .default)
}
extension SwiftSecurity.AccessPolicy.Accessibility : Swift.Equatable {}
extension SwiftSecurity.AccessPolicy.Accessibility : Swift.Hashable {}
extension SwiftSecurity.AuthenticationType : Swift.Equatable {}
extension SwiftSecurity.AuthenticationType : Swift.Hashable {}
extension SwiftSecurity.KeyClass : Swift.Equatable {}
extension SwiftSecurity.KeyClass : Swift.Hashable {}
extension SwiftSecurity.KeyType : Swift.Equatable {}
extension SwiftSecurity.KeyType : Swift.Hashable {}
extension SwiftSecurity.ProtocolType : Swift.Equatable {}
extension SwiftSecurity.ProtocolType : Swift.Hashable {}
extension SwiftSecurity.TokenID : Swift.Equatable {}
extension SwiftSecurity.TokenID : Swift.Hashable {}
extension SwiftSecurity.Credential : Swift.Sendable {}
